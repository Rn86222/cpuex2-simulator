<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="5189"><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="19.3294%" y="117" width="0.0964%" height="15" fill="rgb(227,0,7)" fg:x="1003" fg:w="5"/><text x="19.5794%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (8 samples, 0.15%)</title><rect x="19.4257%" y="117" width="0.1542%" height="15" fill="rgb(217,0,24)" fg:x="1008" fg:w="8"/><text x="19.6757%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (10 samples, 0.19%)</title><rect x="19.5799%" y="117" width="0.1927%" height="15" fill="rgb(221,193,54)" fg:x="1016" fg:w="10"/><text x="19.8299%" y="127.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="19.7726%" y="117" width="0.1349%" height="15" fill="rgb(248,212,6)" fg:x="1026" fg:w="7"/><text x="20.0226%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="19.9075%" y="117" width="0.0385%" height="15" fill="rgb(208,68,35)" fg:x="1033" fg:w="2"/><text x="20.1575%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (21 samples, 0.40%)</title><rect x="19.9460%" y="117" width="0.4047%" height="15" fill="rgb(232,128,0)" fg:x="1035" fg:w="21"/><text x="20.1960%" y="127.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (202 samples, 3.89%)</title><rect x="16.5542%" y="133" width="3.8929%" height="15" fill="rgb(207,160,47)" fg:x="859" fg:w="202"/><text x="16.8042%" y="143.50">&lt;sim..</text></g><g><title>&lt;simulator::instruction::UInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="20.3507%" y="117" width="0.0964%" height="15" fill="rgb(228,23,34)" fg:x="1056" fg:w="5"/><text x="20.6007%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (217 samples, 4.18%)</title><rect x="20.4471%" y="133" width="4.1819%" height="15" fill="rgb(218,30,26)" fg:x="1061" fg:w="217"/><text x="20.6971%" y="143.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (30 samples, 0.58%)</title><rect x="24.0509%" y="117" width="0.5781%" height="15" fill="rgb(220,122,19)" fg:x="1248" fg:w="30"/><text x="24.3009%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (125 samples, 2.41%)</title><rect x="24.6290%" y="133" width="2.4089%" height="15" fill="rgb(250,228,42)" fg:x="1278" fg:w="125"/><text x="24.8790%" y="143.50">ha..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (382 samples, 7.36%)</title><rect x="27.0380%" y="133" width="7.3617%" height="15" fill="rgb(240,193,28)" fg:x="1403" fg:w="382"/><text x="27.2880%" y="143.50">hashbrown:..</text></g><g><title>core::hash::BuildHasher::hash_one (231 samples, 4.45%)</title><rect x="29.9480%" y="117" width="4.4517%" height="15" fill="rgb(216,20,37)" fg:x="1554" fg:w="231"/><text x="30.1980%" y="127.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (73 samples, 1.41%)</title><rect x="32.9929%" y="101" width="1.4068%" height="15" fill="rgb(206,188,39)" fg:x="1712" fg:w="73"/><text x="33.2429%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (215 samples, 4.14%)</title><rect x="41.4145%" y="117" width="4.1434%" height="15" fill="rgb(217,207,13)" fg:x="2149" fg:w="215"/><text x="41.6645%" y="127.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.67%)</title><rect x="44.8834%" y="101" width="0.6745%" height="15" fill="rgb(231,73,38)" fg:x="2329" fg:w="35"/><text x="45.1334%" y="111.50"></text></g><g><title>simulator::core::Core::save_pc (662 samples, 12.76%)</title><rect x="34.3997%" y="133" width="12.7578%" height="15" fill="rgb(225,20,46)" fg:x="1785" fg:w="662"/><text x="34.6497%" y="143.50">simulator::core::Co..</text></g><g><title>simulator::decoder::decode_instruction (83 samples, 1.60%)</title><rect x="45.5579%" y="117" width="1.5995%" height="15" fill="rgb(210,31,41)" fg:x="2364" fg:w="83"/><text x="45.8079%" y="127.50"></text></g><g><title>simulator::decoder::decode_instruction (42 samples, 0.81%)</title><rect x="47.1574%" y="133" width="0.8094%" height="15" fill="rgb(221,200,47)" fg:x="2447" fg:w="42"/><text x="47.4074%" y="143.50"></text></g><g><title>simulator::instruction::create_instruction_struct (103 samples, 1.98%)</title><rect x="47.9669%" y="133" width="1.9850%" height="15" fill="rgb(226,26,5)" fg:x="2489" fg:w="103"/><text x="48.2169%" y="143.50">s..</text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.15%)</title><rect x="54.1337%" y="101" width="0.1542%" height="15" fill="rgb(249,33,26)" fg:x="2809" fg:w="8"/><text x="54.3837%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="54.2301%" y="85" width="0.0578%" height="15" fill="rgb(235,183,28)" fg:x="2814" fg:w="3"/><text x="54.4801%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::exec (29 samples, 0.56%)</title><rect x="53.9218%" y="117" width="0.5589%" height="15" fill="rgb(221,5,38)" fg:x="2798" fg:w="29"/><text x="54.1718%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.19%)</title><rect x="54.2879%" y="101" width="0.1927%" height="15" fill="rgb(247,18,42)" fg:x="2817" fg:w="10"/><text x="54.5379%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (43 samples, 0.83%)</title><rect x="55.0588%" y="101" width="0.8287%" height="15" fill="rgb(241,131,45)" fg:x="2857" fg:w="43"/><text x="55.3088%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.25%)</title><rect x="55.6369%" y="85" width="0.2505%" height="15" fill="rgb(249,31,29)" fg:x="2887" fg:w="13"/><text x="55.8869%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::exec (94 samples, 1.81%)</title><rect x="54.4806%" y="117" width="1.8115%" height="15" fill="rgb(225,111,53)" fg:x="2827" fg:w="94"/><text x="54.7306%" y="127.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.40%)</title><rect x="55.8875%" y="101" width="0.4047%" height="15" fill="rgb(238,160,17)" fg:x="2900" fg:w="21"/><text x="56.1375%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Beq as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="56.2922%" y="117" width="0.0193%" height="15" fill="rgb(214,148,48)" fg:x="2921" fg:w="1"/><text x="56.5422%" y="127.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (5 samples, 0.10%)</title><rect x="56.4463%" y="101" width="0.0964%" height="15" fill="rgb(232,36,49)" fg:x="2929" fg:w="5"/><text x="56.6963%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.15%)</title><rect x="56.5427%" y="101" width="0.1542%" height="15" fill="rgb(209,103,24)" fg:x="2934" fg:w="8"/><text x="56.7927%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fadd as simulator::instruction::InstructionTrait&gt;::exec (21 samples, 0.40%)</title><rect x="56.3114%" y="117" width="0.4047%" height="15" fill="rgb(229,88,8)" fg:x="2922" fg:w="21"/><text x="56.5614%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="56.6969%" y="101" width="0.0193%" height="15" fill="rgb(213,181,19)" fg:x="2942" fg:w="1"/><text x="56.9469%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="56.7354%" y="101" width="0.0193%" height="15" fill="rgb(254,191,54)" fg:x="2944" fg:w="1"/><text x="56.9854%" y="111.50"></text></g><g><title>&lt;simulator::instruction::FcvtSW as simulator::instruction::InstructionTrait&gt;::exec (4 samples, 0.08%)</title><rect x="56.7161%" y="117" width="0.0771%" height="15" fill="rgb(241,83,37)" fg:x="2943" fg:w="4"/><text x="56.9661%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.04%)</title><rect x="56.7547%" y="101" width="0.0385%" height="15" fill="rgb(233,36,39)" fg:x="2945" fg:w="2"/><text x="57.0047%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Feq as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="56.7932%" y="117" width="0.0193%" height="15" fill="rgb(226,3,54)" fg:x="2947" fg:w="1"/><text x="57.0432%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="56.7932%" y="101" width="0.0193%" height="15" fill="rgb(245,192,40)" fg:x="2947" fg:w="1"/><text x="57.0432%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fle as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="56.8125%" y="117" width="0.0193%" height="15" fill="rgb(238,167,29)" fg:x="2948" fg:w="1"/><text x="57.0625%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="56.8125%" y="101" width="0.0193%" height="15" fill="rgb(232,182,51)" fg:x="2948" fg:w="1"/><text x="57.0625%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="56.8318%" y="101" width="0.0771%" height="15" fill="rgb(231,60,39)" fg:x="2949" fg:w="4"/><text x="57.0818%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Flt as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.10%)</title><rect x="56.8318%" y="117" width="0.0964%" height="15" fill="rgb(208,69,12)" fg:x="2949" fg:w="5"/><text x="57.0818%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="56.9088%" y="101" width="0.0193%" height="15" fill="rgb(235,93,37)" fg:x="2953" fg:w="1"/><text x="57.1588%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.10%)</title><rect x="56.9281%" y="117" width="0.0964%" height="15" fill="rgb(213,116,39)" fg:x="2954" fg:w="5"/><text x="57.1781%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fmul as simulator::instruction::InstructionTrait&gt;::exec (8 samples, 0.15%)</title><rect x="57.0245%" y="117" width="0.1542%" height="15" fill="rgb(222,207,29)" fg:x="2959" fg:w="8"/><text x="57.2745%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.08%)</title><rect x="57.1016%" y="101" width="0.0771%" height="15" fill="rgb(206,96,30)" fg:x="2963" fg:w="4"/><text x="57.3516%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsgnjn as simulator::instruction::InstructionTrait&gt;::exec (2 samples, 0.04%)</title><rect x="57.1786%" y="117" width="0.0385%" height="15" fill="rgb(218,138,4)" fg:x="2967" fg:w="2"/><text x="57.4286%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="57.1979%" y="101" width="0.0193%" height="15" fill="rgb(250,191,14)" fg:x="2968" fg:w="1"/><text x="57.4479%" y="111.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="57.2750%" y="101" width="0.0193%" height="15" fill="rgb(239,60,40)" fg:x="2972" fg:w="1"/><text x="57.5250%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsub as simulator::instruction::InstructionTrait&gt;::exec (7 samples, 0.13%)</title><rect x="57.2172%" y="117" width="0.1349%" height="15" fill="rgb(206,27,48)" fg:x="2969" fg:w="7"/><text x="57.4672%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="57.2943%" y="101" width="0.0578%" height="15" fill="rgb(225,35,8)" fg:x="2973" fg:w="3"/><text x="57.5443%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="57.3328%" y="85" width="0.0193%" height="15" fill="rgb(250,213,24)" fg:x="2975" fg:w="1"/><text x="57.5828%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::exec (3 samples, 0.06%)</title><rect x="57.3521%" y="117" width="0.0578%" height="15" fill="rgb(247,123,22)" fg:x="2976" fg:w="3"/><text x="57.6021%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="58.3735%" y="101" width="0.0578%" height="15" fill="rgb(231,138,38)" fg:x="3029" fg:w="3"/><text x="58.6235%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="58.4313%" y="101" width="0.0385%" height="15" fill="rgb(231,145,46)" fg:x="3032" fg:w="2"/><text x="58.6813%" y="111.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="58.4698%" y="101" width="0.0193%" height="15" fill="rgb(251,118,11)" fg:x="3034" fg:w="1"/><text x="58.7198%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="58.4891%" y="101" width="0.0385%" height="15" fill="rgb(217,147,25)" fg:x="3035" fg:w="2"/><text x="58.7391%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (62 samples, 1.19%)</title><rect x="57.4099%" y="117" width="1.1948%" height="15" fill="rgb(247,81,37)" fg:x="2979" fg:w="62"/><text x="57.6599%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (4 samples, 0.08%)</title><rect x="58.5277%" y="101" width="0.0771%" height="15" fill="rgb(209,12,38)" fg:x="3037" fg:w="4"/><text x="58.7777%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.12%)</title><rect x="58.7396%" y="101" width="0.1156%" height="15" fill="rgb(227,1,9)" fg:x="3048" fg:w="6"/><text x="58.9896%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="58.8360%" y="85" width="0.0193%" height="15" fill="rgb(248,47,43)" fg:x="3053" fg:w="1"/><text x="59.0860%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Jal as simulator::instruction::InstructionTrait&gt;::exec (20 samples, 0.39%)</title><rect x="58.6047%" y="117" width="0.3854%" height="15" fill="rgb(221,10,30)" fg:x="3041" fg:w="20"/><text x="58.8547%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.13%)</title><rect x="58.8553%" y="101" width="0.1349%" height="15" fill="rgb(210,229,1)" fg:x="3054" fg:w="7"/><text x="59.1053%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::exec (4 samples, 0.08%)</title><rect x="58.9902%" y="117" width="0.0771%" height="15" fill="rgb(222,148,37)" fg:x="3061" fg:w="4"/><text x="59.2402%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.10%)</title><rect x="59.2022%" y="101" width="0.0964%" height="15" fill="rgb(234,67,33)" fg:x="3072" fg:w="5"/><text x="59.4522%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="59.2600%" y="85" width="0.0385%" height="15" fill="rgb(247,98,35)" fg:x="3075" fg:w="2"/><text x="59.5100%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Lui as simulator::instruction::InstructionTrait&gt;::exec (18 samples, 0.35%)</title><rect x="59.0673%" y="117" width="0.3469%" height="15" fill="rgb(247,138,52)" fg:x="3065" fg:w="18"/><text x="59.3173%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.12%)</title><rect x="59.2985%" y="101" width="0.1156%" height="15" fill="rgb(213,79,30)" fg:x="3077" fg:w="6"/><text x="59.5485%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::exec (7 samples, 0.13%)</title><rect x="59.4141%" y="117" width="0.1349%" height="15" fill="rgb(246,177,23)" fg:x="3083" fg:w="7"/><text x="59.6641%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.13%)</title><rect x="59.6454%" y="101" width="0.1349%" height="15" fill="rgb(230,62,27)" fg:x="3095" fg:w="7"/><text x="59.8954%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="59.7418%" y="85" width="0.0385%" height="15" fill="rgb(216,154,8)" fg:x="3100" fg:w="2"/><text x="59.9918%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::exec (16 samples, 0.31%)</title><rect x="59.5490%" y="117" width="0.3083%" height="15" fill="rgb(244,35,45)" fg:x="3090" fg:w="16"/><text x="59.7990%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.08%)</title><rect x="59.7803%" y="101" width="0.0771%" height="15" fill="rgb(251,115,12)" fg:x="3102" fg:w="4"/><text x="60.0303%" y="111.50"></text></g><g><title>simulator::instruction::exec_instruction (517 samples, 9.96%)</title><rect x="49.9518%" y="133" width="9.9634%" height="15" fill="rgb(240,54,50)" fg:x="2592" fg:w="517"/><text x="50.2018%" y="143.50">simulator::ins..</text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::exec (3 samples, 0.06%)</title><rect x="59.8574%" y="117" width="0.0578%" height="15" fill="rgb(233,84,52)" fg:x="3106" fg:w="3"/><text x="60.1074%" y="127.50"></text></g><g><title>simulator::instruction::get_destination_register (28 samples, 0.54%)</title><rect x="59.9152%" y="133" width="0.5396%" height="15" fill="rgb(207,117,47)" fg:x="3109" fg:w="28"/><text x="60.1652%" y="143.50"></text></g><g><title>simulator::instruction::get_instruction_count (26 samples, 0.50%)</title><rect x="60.4548%" y="133" width="0.5011%" height="15" fill="rgb(249,43,39)" fg:x="3137" fg:w="26"/><text x="60.7048%" y="143.50"></text></g><g><title>simulator::instruction::get_jump_address (12 samples, 0.23%)</title><rect x="60.9559%" y="133" width="0.2313%" height="15" fill="rgb(209,38,44)" fg:x="3163" fg:w="12"/><text x="61.2059%" y="143.50"></text></g><g><title>alloc::alloc::box_free (7 samples, 0.13%)</title><rect x="62.9794%" y="117" width="0.1349%" height="15" fill="rgb(236,212,23)" fg:x="3268" fg:w="7"/><text x="63.2294%" y="127.50"></text></g><g><title>simulator::instruction::get_name (145 samples, 2.79%)</title><rect x="61.1871%" y="133" width="2.7944%" height="15" fill="rgb(242,79,21)" fg:x="3175" fg:w="145"/><text x="61.4371%" y="143.50">si..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (45 samples, 0.87%)</title><rect x="63.1143%" y="117" width="0.8672%" height="15" fill="rgb(211,96,35)" fg:x="3275" fg:w="45"/><text x="63.3643%" y="127.50"></text></g><g><title>__rdl_alloc (11 samples, 0.21%)</title><rect x="63.7695%" y="101" width="0.2120%" height="15" fill="rgb(253,215,40)" fg:x="3309" fg:w="11"/><text x="64.0195%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.21%)</title><rect x="63.7695%" y="85" width="0.2120%" height="15" fill="rgb(211,81,21)" fg:x="3309" fg:w="11"/><text x="64.0195%" y="95.50"></text></g><g><title>simulator::instruction::get_source_registers (21 samples, 0.40%)</title><rect x="63.9815%" y="133" width="0.4047%" height="15" fill="rgb(208,190,38)" fg:x="3320" fg:w="21"/><text x="64.2315%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="64.3669%" y="117" width="0.0193%" height="15" fill="rgb(235,213,38)" fg:x="3340" fg:w="1"/><text x="64.6169%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="64.3669%" y="101" width="0.0193%" height="15" fill="rgb(237,122,38)" fg:x="3340" fg:w="1"/><text x="64.6169%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.27%)</title><rect x="68.7223%" y="101" width="0.2698%" height="15" fill="rgb(244,218,35)" fg:x="3566" fg:w="14"/><text x="68.9723%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="68.9343%" y="85" width="0.0578%" height="15" fill="rgb(240,68,47)" fg:x="3577" fg:w="3"/><text x="69.1843%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.23%)</title><rect x="68.9921%" y="101" width="0.2313%" height="15" fill="rgb(210,16,53)" fg:x="3580" fg:w="12"/><text x="69.2421%" y="111.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (27 samples, 0.52%)</title><rect x="69.9557%" y="69" width="0.5203%" height="15" fill="rgb(235,124,12)" fg:x="3630" fg:w="27"/><text x="70.2057%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="70.3796%" y="53" width="0.0964%" height="15" fill="rgb(224,169,11)" fg:x="3652" fg:w="5"/><text x="70.6296%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="70.7265%" y="53" width="0.0578%" height="15" fill="rgb(250,166,2)" fg:x="3670" fg:w="3"/><text x="70.9765%" y="63.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (35 samples, 0.67%)</title><rect x="70.4760%" y="69" width="0.6745%" height="15" fill="rgb(242,216,29)" fg:x="3657" fg:w="35"/><text x="70.7260%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (19 samples, 0.37%)</title><rect x="70.7844%" y="53" width="0.3662%" height="15" fill="rgb(230,116,27)" fg:x="3673" fg:w="19"/><text x="71.0344%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="71.1120%" y="37" width="0.0385%" height="15" fill="rgb(228,99,48)" fg:x="3690" fg:w="2"/><text x="71.3620%" y="47.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (14 samples, 0.27%)</title><rect x="71.5359%" y="53" width="0.2698%" height="15" fill="rgb(253,11,6)" fg:x="3712" fg:w="14"/><text x="71.7859%" y="63.50"></text></g><g><title>simulator::cache::Cache::get_word (138 samples, 2.66%)</title><rect x="69.3197%" y="85" width="2.6595%" height="15" fill="rgb(247,143,39)" fg:x="3597" fg:w="138"/><text x="69.5697%" y="95.50">si..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (43 samples, 0.83%)</title><rect x="71.1505%" y="69" width="0.8287%" height="15" fill="rgb(236,97,10)" fg:x="3692" fg:w="43"/><text x="71.4005%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (9 samples, 0.17%)</title><rect x="71.8057%" y="53" width="0.1734%" height="15" fill="rgb(233,208,19)" fg:x="3726" fg:w="9"/><text x="72.0557%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="71.9214%" y="37" width="0.0578%" height="15" fill="rgb(216,164,2)" fg:x="3732" fg:w="3"/><text x="72.1714%" y="47.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.02%)</title><rect x="71.9792%" y="69" width="0.0193%" height="15" fill="rgb(220,129,5)" fg:x="3735" fg:w="1"/><text x="72.2292%" y="79.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::memory (197 samples, 3.80%)</title><rect x="68.2212%" y="117" width="3.7965%" height="15" fill="rgb(242,17,10)" fg:x="3540" fg:w="197"/><text x="68.4712%" y="127.50">&lt;sim..</text></g><g><title>simulator::core::Core::load_word (145 samples, 2.79%)</title><rect x="69.2234%" y="101" width="2.7944%" height="15" fill="rgb(242,107,0)" fg:x="3592" fg:w="145"/><text x="69.4734%" y="111.50">si..</text></g><g><title>simulator::cache::Cache::set_line (2 samples, 0.04%)</title><rect x="71.9792%" y="85" width="0.0385%" height="15" fill="rgb(251,28,31)" fg:x="3735" fg:w="2"/><text x="72.2292%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="71.9985%" y="69" width="0.0193%" height="15" fill="rgb(233,223,10)" fg:x="3736" fg:w="1"/><text x="72.2485%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.02%)</title><rect x="71.9985%" y="53" width="0.0193%" height="15" fill="rgb(215,21,27)" fg:x="3736" fg:w="1"/><text x="72.2485%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::memory (4 samples, 0.08%)</title><rect x="72.0177%" y="117" width="0.0771%" height="15" fill="rgb(232,23,21)" fg:x="3737" fg:w="4"/><text x="72.2677%" y="127.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (4 samples, 0.08%)</title><rect x="72.8849%" y="101" width="0.0771%" height="15" fill="rgb(244,5,23)" fg:x="3782" fg:w="4"/><text x="73.1349%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (4 samples, 0.08%)</title><rect x="72.9620%" y="101" width="0.0771%" height="15" fill="rgb(226,81,46)" fg:x="3786" fg:w="4"/><text x="73.2120%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="73.0391%" y="101" width="0.0964%" height="15" fill="rgb(247,70,30)" fg:x="3790" fg:w="5"/><text x="73.2891%" y="111.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="73.1355%" y="101" width="0.0385%" height="15" fill="rgb(212,68,19)" fg:x="3795" fg:w="2"/><text x="73.3855%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="73.1740%" y="101" width="0.0193%" height="15" fill="rgb(240,187,13)" fg:x="3797" fg:w="1"/><text x="73.4240%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (69 samples, 1.33%)</title><rect x="72.0948%" y="117" width="1.3297%" height="15" fill="rgb(223,113,26)" fg:x="3741" fg:w="69"/><text x="72.3448%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (12 samples, 0.23%)</title><rect x="73.1933%" y="101" width="0.2313%" height="15" fill="rgb(206,192,2)" fg:x="3798" fg:w="12"/><text x="73.4433%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.40%)</title><rect x="73.9449%" y="101" width="0.4047%" height="15" fill="rgb(241,108,4)" fg:x="3837" fg:w="21"/><text x="74.1949%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="74.2532%" y="85" width="0.0964%" height="15" fill="rgb(247,173,49)" fg:x="3853" fg:w="5"/><text x="74.5032%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.37%)</title><rect x="74.3496%" y="101" width="0.3662%" height="15" fill="rgb(224,114,35)" fg:x="3858" fg:w="19"/><text x="74.5996%" y="111.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (38 samples, 0.73%)</title><rect x="75.7371%" y="69" width="0.7323%" height="15" fill="rgb(245,159,27)" fg:x="3930" fg:w="38"/><text x="75.9871%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="76.4116%" y="53" width="0.0578%" height="15" fill="rgb(245,172,44)" fg:x="3965" fg:w="3"/><text x="76.6616%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (12 samples, 0.23%)</title><rect x="76.7778%" y="53" width="0.2313%" height="15" fill="rgb(236,23,11)" fg:x="3984" fg:w="12"/><text x="77.0278%" y="63.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (53 samples, 1.02%)</title><rect x="76.4695%" y="69" width="1.0214%" height="15" fill="rgb(205,117,38)" fg:x="3968" fg:w="53"/><text x="76.7195%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (25 samples, 0.48%)</title><rect x="77.0091%" y="53" width="0.4818%" height="15" fill="rgb(237,72,25)" fg:x="3996" fg:w="25"/><text x="77.2591%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="77.4330%" y="37" width="0.0578%" height="15" fill="rgb(244,70,9)" fg:x="4018" fg:w="3"/><text x="77.6830%" y="47.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (24 samples, 0.46%)</title><rect x="77.9148%" y="53" width="0.4625%" height="15" fill="rgb(217,125,39)" fg:x="4043" fg:w="24"/><text x="78.1648%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::memory (266 samples, 5.13%)</title><rect x="73.4246%" y="117" width="5.1262%" height="15" fill="rgb(235,36,10)" fg:x="3810" fg:w="266"/><text x="73.6746%" y="127.50">&lt;simul..</text></g><g><title>simulator::core::Core::load_word (199 samples, 3.84%)</title><rect x="74.7157%" y="101" width="3.8350%" height="15" fill="rgb(251,123,47)" fg:x="3877" fg:w="199"/><text x="74.9657%" y="111.50">simu..</text></g><g><title>simulator::cache::Cache::get_word (195 samples, 3.76%)</title><rect x="74.7928%" y="85" width="3.7579%" height="15" fill="rgb(221,13,13)" fg:x="3881" fg:w="195"/><text x="75.0428%" y="95.50">simu..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (55 samples, 1.06%)</title><rect x="77.4908%" y="69" width="1.0599%" height="15" fill="rgb(238,131,9)" fg:x="4021" fg:w="55"/><text x="77.7408%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (9 samples, 0.17%)</title><rect x="78.3773%" y="53" width="0.1734%" height="15" fill="rgb(211,50,8)" fg:x="4067" fg:w="9"/><text x="78.6273%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="78.5315%" y="37" width="0.0193%" height="15" fill="rgb(245,182,24)" fg:x="4075" fg:w="1"/><text x="78.7815%" y="47.50"></text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::memory (1 samples, 0.02%)</title><rect x="78.5508%" y="117" width="0.0193%" height="15" fill="rgb(242,14,37)" fg:x="4076" fg:w="1"/><text x="78.8008%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="79.8998%" y="69" width="0.0578%" height="15" fill="rgb(246,228,12)" fg:x="4146" fg:w="3"/><text x="80.1498%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (33 samples, 0.64%)</title><rect x="79.3409%" y="85" width="0.6360%" height="15" fill="rgb(213,55,15)" fg:x="4117" fg:w="33"/><text x="79.5909%" y="95.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.02%)</title><rect x="79.9576%" y="69" width="0.0193%" height="15" fill="rgb(209,9,3)" fg:x="4149" fg:w="1"/><text x="80.2076%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (5 samples, 0.10%)</title><rect x="80.3045%" y="69" width="0.0964%" height="15" fill="rgb(230,59,30)" fg:x="4167" fg:w="5"/><text x="80.5545%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (48 samples, 0.93%)</title><rect x="79.9769%" y="85" width="0.9250%" height="15" fill="rgb(209,121,21)" fg:x="4150" fg:w="48"/><text x="80.2269%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (26 samples, 0.50%)</title><rect x="80.4008%" y="69" width="0.5011%" height="15" fill="rgb(220,109,13)" fg:x="4172" fg:w="26"/><text x="80.6508%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="80.8441%" y="53" width="0.0578%" height="15" fill="rgb(232,18,1)" fg:x="4195" fg:w="3"/><text x="81.0941%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (21 samples, 0.40%)</title><rect x="81.5571%" y="69" width="0.4047%" height="15" fill="rgb(215,41,42)" fg:x="4232" fg:w="21"/><text x="81.8071%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="82.1160%" y="53" width="0.0193%" height="15" fill="rgb(224,123,36)" fg:x="4261" fg:w="1"/><text x="82.3660%" y="63.50"></text></g><g><title>simulator::instruction::memory_access (922 samples, 17.77%)</title><rect x="64.3862%" y="133" width="17.7684%" height="15" fill="rgb(240,125,3)" fg:x="3341" fg:w="922"/><text x="64.6362%" y="143.50">simulator::instruction::memo..</text></g><g><title>simulator::core::Core::store_word (186 samples, 3.58%)</title><rect x="78.5701%" y="117" width="3.5845%" height="15" fill="rgb(205,98,50)" fg:x="4077" fg:w="186"/><text x="78.8201%" y="127.50">simu..</text></g><g><title>simulator::cache::Cache::set_word (185 samples, 3.57%)</title><rect x="78.5893%" y="101" width="3.5652%" height="15" fill="rgb(205,185,37)" fg:x="4078" fg:w="185"/><text x="78.8393%" y="111.50">simu..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (65 samples, 1.25%)</title><rect x="80.9019%" y="85" width="1.2526%" height="15" fill="rgb(238,207,15)" fg:x="4198" fg:w="65"/><text x="81.1519%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (10 samples, 0.19%)</title><rect x="81.9618%" y="69" width="0.1927%" height="15" fill="rgb(213,199,42)" fg:x="4253" fg:w="10"/><text x="82.2118%" y="79.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.02%)</title><rect x="82.1353%" y="53" width="0.0193%" height="15" fill="rgb(235,201,11)" fg:x="4262" fg:w="1"/><text x="82.3853%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Beq as simulator::instruction::InstructionTrait&gt;::register_fetch (30 samples, 0.58%)</title><rect x="86.7412%" y="117" width="0.5781%" height="15" fill="rgb(207,46,11)" fg:x="4501" fg:w="30"/><text x="86.9912%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.37%)</title><rect x="86.9532%" y="101" width="0.3662%" height="15" fill="rgb(241,35,35)" fg:x="4512" fg:w="19"/><text x="87.2032%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="87.2808%" y="85" width="0.0385%" height="15" fill="rgb(243,32,47)" fg:x="4529" fg:w="2"/><text x="87.5308%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Feq as simulator::instruction::InstructionTrait&gt;::register_fetch (35 samples, 0.67%)</title><rect x="87.3193%" y="117" width="0.6745%" height="15" fill="rgb(247,202,23)" fg:x="4531" fg:w="35"/><text x="87.5693%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.40%)</title><rect x="87.5891%" y="101" width="0.4047%" height="15" fill="rgb(219,102,11)" fg:x="4545" fg:w="21"/><text x="87.8391%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.08%)</title><rect x="87.9167%" y="85" width="0.0771%" height="15" fill="rgb(243,110,44)" fg:x="4562" fg:w="4"/><text x="88.1667%" y="95.50"></text></g><g><title>&lt;simulator::instruction::FmvWX as simulator::instruction::InstructionTrait&gt;::register_fetch (1 samples, 0.02%)</title><rect x="87.9938%" y="117" width="0.0193%" height="15" fill="rgb(222,74,54)" fg:x="4566" fg:w="1"/><text x="88.2438%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::register_fetch (24 samples, 0.46%)</title><rect x="88.0131%" y="117" width="0.4625%" height="15" fill="rgb(216,99,12)" fg:x="4567" fg:w="24"/><text x="88.2631%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.27%)</title><rect x="88.2058%" y="101" width="0.2698%" height="15" fill="rgb(226,22,26)" fg:x="4577" fg:w="14"/><text x="88.4558%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.15%)</title><rect x="88.3214%" y="85" width="0.1542%" height="15" fill="rgb(217,163,10)" fg:x="4583" fg:w="8"/><text x="88.5714%" y="95.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="89.5548%" y="101" width="0.0385%" height="15" fill="rgb(213,25,53)" fg:x="4647" fg:w="2"/><text x="89.8048%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="89.5934%" y="101" width="0.0964%" height="15" fill="rgb(252,105,26)" fg:x="4649" fg:w="5"/><text x="89.8434%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="89.6897%" y="101" width="0.0578%" height="15" fill="rgb(220,39,43)" fg:x="4654" fg:w="3"/><text x="89.9397%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="89.7475%" y="101" width="0.0193%" height="15" fill="rgb(229,68,48)" fg:x="4657" fg:w="1"/><text x="89.9975%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (4 samples, 0.08%)</title><rect x="89.7668%" y="101" width="0.0771%" height="15" fill="rgb(252,8,32)" fg:x="4658" fg:w="4"/><text x="90.0168%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (73 samples, 1.41%)</title><rect x="88.4756%" y="117" width="1.4068%" height="15" fill="rgb(223,20,43)" fg:x="4591" fg:w="73"/><text x="88.7256%" y="127.50"></text></g><g><title>&lt;simulator::instruction::UInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="89.8439%" y="101" width="0.0385%" height="15" fill="rgb(229,81,49)" fg:x="4662" fg:w="2"/><text x="90.0939%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::register_fetch (12 samples, 0.23%)</title><rect x="89.8824%" y="117" width="0.2313%" height="15" fill="rgb(236,28,36)" fg:x="4664" fg:w="12"/><text x="90.1324%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="90.0366%" y="101" width="0.0771%" height="15" fill="rgb(249,185,26)" fg:x="4672" fg:w="4"/><text x="90.2866%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="90.0944%" y="85" width="0.0193%" height="15" fill="rgb(249,174,33)" fg:x="4675" fg:w="1"/><text x="90.3444%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Lb as simulator::instruction::InstructionTrait&gt;::register_fetch (96 samples, 1.85%)</title><rect x="90.1137%" y="117" width="1.8501%" height="15" fill="rgb(233,201,37)" fg:x="4676" fg:w="96"/><text x="90.3637%" y="127.50">&lt;..</text></g><g><title>core::hash::BuildHasher::hash_one (57 samples, 1.10%)</title><rect x="90.8653%" y="101" width="1.0985%" height="15" fill="rgb(221,78,26)" fg:x="4715" fg:w="57"/><text x="91.1153%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.29%)</title><rect x="91.6747%" y="85" width="0.2891%" height="15" fill="rgb(250,127,30)" fg:x="4757" fg:w="15"/><text x="91.9247%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Or as simulator::instruction::InstructionTrait&gt;::register_fetch (24 samples, 0.46%)</title><rect x="91.9638%" y="117" width="0.4625%" height="15" fill="rgb(230,49,44)" fg:x="4772" fg:w="24"/><text x="92.2138%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.29%)</title><rect x="92.1372%" y="101" width="0.2891%" height="15" fill="rgb(229,67,23)" fg:x="4781" fg:w="15"/><text x="92.3872%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="92.3685%" y="85" width="0.0578%" height="15" fill="rgb(249,83,47)" fg:x="4793" fg:w="3"/><text x="92.6185%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Ori as simulator::instruction::InstructionTrait&gt;::register_fetch (72 samples, 1.39%)</title><rect x="92.4263%" y="117" width="1.3876%" height="15" fill="rgb(215,43,3)" fg:x="4796" fg:w="72"/><text x="92.6763%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (39 samples, 0.75%)</title><rect x="93.0622%" y="101" width="0.7516%" height="15" fill="rgb(238,154,13)" fg:x="4829" fg:w="39"/><text x="93.3122%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.15%)</title><rect x="93.6597%" y="85" width="0.1542%" height="15" fill="rgb(219,56,2)" fg:x="4860" fg:w="8"/><text x="93.9097%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Sb as simulator::instruction::InstructionTrait&gt;::register_fetch (34 samples, 0.66%)</title><rect x="93.8138%" y="117" width="0.6552%" height="15" fill="rgb(233,0,4)" fg:x="4868" fg:w="34"/><text x="94.0638%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.25%)</title><rect x="94.2185%" y="101" width="0.2505%" height="15" fill="rgb(235,30,7)" fg:x="4889" fg:w="13"/><text x="94.4685%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="94.3727%" y="85" width="0.0964%" height="15" fill="rgb(250,79,13)" fg:x="4897" fg:w="5"/><text x="94.6227%" y="95.50"></text></g><g><title>simulator::instruction::register_fetch (659 samples, 12.70%)</title><rect x="82.1546%" y="133" width="12.6999%" height="15" fill="rgb(211,146,34)" fg:x="4263" fg:w="659"/><text x="82.4046%" y="143.50">simulator::instruct..</text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::register_fetch (20 samples, 0.39%)</title><rect x="94.4691%" y="117" width="0.3854%" height="15" fill="rgb(228,22,38)" fg:x="4902" fg:w="20"/><text x="94.7191%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.23%)</title><rect x="94.6232%" y="101" width="0.2313%" height="15" fill="rgb(235,168,5)" fg:x="4910" fg:w="12"/><text x="94.8732%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="94.8352%" y="85" width="0.0193%" height="15" fill="rgb(221,155,16)" fg:x="4921" fg:w="1"/><text x="95.0852%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::write_back (4 samples, 0.08%)</title><rect x="98.0728%" y="117" width="0.0771%" height="15" fill="rgb(215,215,53)" fg:x="5089" fg:w="4"/><text x="98.3228%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::write_back (11 samples, 0.21%)</title><rect x="98.1499%" y="117" width="0.2120%" height="15" fill="rgb(223,4,10)" fg:x="5093" fg:w="11"/><text x="98.3999%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fadd as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="98.3619%" y="117" width="0.0385%" height="15" fill="rgb(234,103,6)" fg:x="5104" fg:w="2"/><text x="98.6119%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fdiv as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="98.4005%" y="117" width="0.0193%" height="15" fill="rgb(227,97,0)" fg:x="5106" fg:w="1"/><text x="98.6505%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fle as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="98.4197%" y="117" width="0.0193%" height="15" fill="rgb(234,150,53)" fg:x="5107" fg:w="1"/><text x="98.6697%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::write_back (5 samples, 0.10%)</title><rect x="98.4390%" y="117" width="0.0964%" height="15" fill="rgb(228,201,54)" fg:x="5108" fg:w="5"/><text x="98.6890%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fmul as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="98.5354%" y="117" width="0.0385%" height="15" fill="rgb(222,22,37)" fg:x="5113" fg:w="2"/><text x="98.7854%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsub as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="98.5739%" y="117" width="0.0193%" height="15" fill="rgb(237,53,32)" fg:x="5115" fg:w="1"/><text x="98.8239%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="99.3833%" y="101" width="0.0578%" height="15" fill="rgb(233,25,53)" fg:x="5157" fg:w="3"/><text x="99.6333%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="99.4411%" y="101" width="0.0578%" height="15" fill="rgb(210,40,34)" fg:x="5160" fg:w="3"/><text x="99.6911%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="99.4989%" y="101" width="0.0385%" height="15" fill="rgb(241,220,44)" fg:x="5163" fg:w="2"/><text x="99.7489%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="99.5375%" y="101" width="0.0385%" height="15" fill="rgb(235,28,35)" fg:x="5165" fg:w="2"/><text x="99.7875%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (53 samples, 1.02%)</title><rect x="98.5932%" y="117" width="1.0214%" height="15" fill="rgb(210,56,17)" fg:x="5116" fg:w="53"/><text x="98.8432%" y="127.50"></text></g><g><title>&lt;simulator::instruction::UInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="99.5760%" y="101" width="0.0385%" height="15" fill="rgb(224,130,29)" fg:x="5167" fg:w="2"/><text x="99.8260%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jal as simulator::instruction::InstructionTrait&gt;::write_back (8 samples, 0.15%)</title><rect x="99.6146%" y="117" width="0.1542%" height="15" fill="rgb(235,212,8)" fg:x="5169" fg:w="8"/><text x="99.8646%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="99.7687%" y="117" width="0.0193%" height="15" fill="rgb(223,33,50)" fg:x="5177" fg:w="1"/><text x="100.0187%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lui as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="99.7880%" y="117" width="0.0193%" height="15" fill="rgb(219,149,13)" fg:x="5178" fg:w="1"/><text x="100.0380%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::write_back (7 samples, 0.13%)</title><rect x="99.8073%" y="117" width="0.1349%" height="15" fill="rgb(250,156,29)" fg:x="5179" fg:w="7"/><text x="100.0573%" y="127.50"></text></g><g><title>all (5,189 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="431.50"></text></g><g><title>simulator (5,189 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="415.50">simulator</text></g><g><title>_start (5,189 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="399.50">_start</text></g><g><title>__libc_start_main (5,189 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="383.50">__libc_start_main</text></g><g><title>main (5,189 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (5,189 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,189 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="335.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,189 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="319.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,189 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="303.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,189 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="287.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,189 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,189 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="255.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,189 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="239.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,189 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="223.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,189 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="207.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,189 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="191.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simulator::main (5,189 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="175.50">simulator::main</text></g><g><title>simulator::core::Core::run (5,189 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="5189"/><text x="0.2500%" y="159.50">simulator::core::Core::run</text></g><g><title>simulator::instruction::write_back (267 samples, 5.15%)</title><rect x="94.8545%" y="133" width="5.1455%" height="15" fill="rgb(206,201,31)" fg:x="4922" fg:w="267"/><text x="95.1045%" y="143.50">simula..</text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::write_back (3 samples, 0.06%)</title><rect x="99.9422%" y="117" width="0.0578%" height="15" fill="rgb(231,57,52)" fg:x="5186" fg:w="3"/><text x="100.1922%" y="127.50"></text></g></svg></svg>