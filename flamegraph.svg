<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="5211"><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="20.1881%" y="133" width="0.0576%" height="15" fill="rgb(227,0,7)" fg:x="1052" fg:w="3"/><text x="20.4381%" y="143.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (15 samples, 0.29%)</title><rect x="20.2456%" y="133" width="0.2879%" height="15" fill="rgb(217,0,24)" fg:x="1055" fg:w="15"/><text x="20.4956%" y="143.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="20.5335%" y="133" width="0.0960%" height="15" fill="rgb(221,193,54)" fg:x="1070" fg:w="5"/><text x="20.7835%" y="143.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (4 samples, 0.08%)</title><rect x="20.6294%" y="133" width="0.0768%" height="15" fill="rgb(248,212,6)" fg:x="1075" fg:w="4"/><text x="20.8794%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="20.7062%" y="133" width="0.0192%" height="15" fill="rgb(208,68,35)" fg:x="1079" fg:w="1"/><text x="20.9562%" y="143.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (168 samples, 3.22%)</title><rect x="17.8085%" y="149" width="3.2239%" height="15" fill="rgb(232,128,0)" fg:x="928" fg:w="168"/><text x="18.0585%" y="159.50">&lt;si..</text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (16 samples, 0.31%)</title><rect x="20.7254%" y="133" width="0.3070%" height="15" fill="rgb(207,160,47)" fg:x="1080" fg:w="16"/><text x="20.9754%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (232 samples, 4.45%)</title><rect x="21.0324%" y="149" width="4.4521%" height="15" fill="rgb(228,23,34)" fg:x="1096" fg:w="232"/><text x="21.2824%" y="159.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (45 samples, 0.86%)</title><rect x="24.6210%" y="133" width="0.8636%" height="15" fill="rgb(218,30,26)" fg:x="1283" fg:w="45"/><text x="24.8710%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (123 samples, 2.36%)</title><rect x="25.4846%" y="149" width="2.3604%" height="15" fill="rgb(220,122,19)" fg:x="1328" fg:w="123"/><text x="25.7346%" y="159.50">ha..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (414 samples, 7.94%)</title><rect x="27.8449%" y="149" width="7.9447%" height="15" fill="rgb(250,228,42)" fg:x="1451" fg:w="414"/><text x="28.0949%" y="159.50">hashbrown::..</text></g><g><title>core::hash::BuildHasher::hash_one (226 samples, 4.34%)</title><rect x="31.4527%" y="133" width="4.3370%" height="15" fill="rgb(240,193,28)" fg:x="1639" fg:w="226"/><text x="31.7027%" y="143.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (60 samples, 1.15%)</title><rect x="34.6383%" y="117" width="1.1514%" height="15" fill="rgb(216,20,37)" fg:x="1805" fg:w="60"/><text x="34.8883%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (236 samples, 4.53%)</title><rect x="42.2951%" y="133" width="4.5289%" height="15" fill="rgb(206,188,39)" fg:x="2204" fg:w="236"/><text x="42.5451%" y="143.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.79%)</title><rect x="46.0372%" y="117" width="0.7868%" height="15" fill="rgb(217,207,13)" fg:x="2399" fg:w="41"/><text x="46.2872%" y="127.50"></text></g><g><title>simulator::core::Core::save_pc (682 samples, 13.09%)</title><rect x="35.7897%" y="149" width="13.0877%" height="15" fill="rgb(231,73,38)" fg:x="1865" fg:w="682"/><text x="36.0397%" y="159.50">simulator::core::Cor..</text></g><g><title>simulator::decoder::decode_instruction (107 samples, 2.05%)</title><rect x="46.8240%" y="133" width="2.0533%" height="15" fill="rgb(225,20,46)" fg:x="2440" fg:w="107"/><text x="47.0740%" y="143.50">s..</text></g><g><title>simulator::decoder::decode_instruction (61 samples, 1.17%)</title><rect x="48.8774%" y="149" width="1.1706%" height="15" fill="rgb(210,31,41)" fg:x="2547" fg:w="61"/><text x="49.1274%" y="159.50"></text></g><g><title>simulator::instruction::create_instruction_struct (94 samples, 1.80%)</title><rect x="50.0480%" y="149" width="1.8039%" height="15" fill="rgb(221,200,47)" fg:x="2608" fg:w="94"/><text x="50.2980%" y="159.50">s..</text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.19%)</title><rect x="56.6110%" y="101" width="0.1919%" height="15" fill="rgb(226,26,5)" fg:x="2950" fg:w="10"/><text x="56.8610%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="56.7070%" y="85" width="0.0960%" height="15" fill="rgb(249,33,26)" fg:x="2955" fg:w="5"/><text x="56.9570%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::exec (25 samples, 0.48%)</title><rect x="56.4575%" y="133" width="0.4798%" height="15" fill="rgb(235,183,28)" fg:x="2942" fg:w="25"/><text x="56.7075%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.44%)</title><rect x="56.4959%" y="117" width="0.4414%" height="15" fill="rgb(221,5,38)" fg:x="2944" fg:w="23"/><text x="56.7459%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.13%)</title><rect x="56.8029%" y="101" width="0.1343%" height="15" fill="rgb(247,18,42)" fg:x="2960" fg:w="7"/><text x="57.0529%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.56%)</title><rect x="57.4746%" y="101" width="0.5565%" height="15" fill="rgb(241,131,45)" fg:x="2995" fg:w="29"/><text x="57.7246%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="58.0119%" y="85" width="0.0192%" height="15" fill="rgb(249,31,29)" fg:x="3023" fg:w="1"/><text x="58.2619%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::exec (77 samples, 1.48%)</title><rect x="56.9372%" y="133" width="1.4776%" height="15" fill="rgb(225,111,53)" fg:x="2967" fg:w="77"/><text x="57.1872%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68 samples, 1.30%)</title><rect x="57.1100%" y="117" width="1.3049%" height="15" fill="rgb(238,160,17)" fg:x="2976" fg:w="68"/><text x="57.3600%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.38%)</title><rect x="58.0311%" y="101" width="0.3838%" height="15" fill="rgb(214,148,48)" fg:x="3024" fg:w="20"/><text x="58.2811%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Beq as simulator::instruction::InstructionTrait&gt;::exec (3 samples, 0.06%)</title><rect x="58.4149%" y="133" width="0.0576%" height="15" fill="rgb(232,36,49)" fg:x="3044" fg:w="3"/><text x="58.6649%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Bne as simulator::instruction::InstructionTrait&gt;::exec (2 samples, 0.04%)</title><rect x="58.4725%" y="133" width="0.0384%" height="15" fill="rgb(209,103,24)" fg:x="3047" fg:w="2"/><text x="58.7225%" y="143.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="58.5108%" y="117" width="0.0192%" height="15" fill="rgb(229,88,8)" fg:x="3049" fg:w="1"/><text x="58.7608%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="58.5684%" y="101" width="0.0576%" height="15" fill="rgb(213,181,19)" fg:x="3052" fg:w="3"/><text x="58.8184%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="58.6068%" y="85" width="0.0192%" height="15" fill="rgb(254,191,54)" fg:x="3054" fg:w="1"/><text x="58.8568%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Fadd as simulator::instruction::InstructionTrait&gt;::exec (8 samples, 0.15%)</title><rect x="58.5108%" y="133" width="0.1535%" height="15" fill="rgb(241,83,37)" fg:x="3049" fg:w="8"/><text x="58.7608%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.13%)</title><rect x="58.5300%" y="117" width="0.1343%" height="15" fill="rgb(233,36,39)" fg:x="3050" fg:w="7"/><text x="58.7800%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.04%)</title><rect x="58.6260%" y="101" width="0.0384%" height="15" fill="rgb(226,3,54)" fg:x="3055" fg:w="2"/><text x="58.8760%" y="111.50"></text></g><g><title>&lt;simulator::instruction::FcvtSW as simulator::instruction::InstructionTrait&gt;::exec (4 samples, 0.08%)</title><rect x="58.6644%" y="133" width="0.0768%" height="15" fill="rgb(245,192,40)" fg:x="3057" fg:w="4"/><text x="58.9144%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.08%)</title><rect x="58.6644%" y="117" width="0.0768%" height="15" fill="rgb(238,167,29)" fg:x="3057" fg:w="4"/><text x="58.9144%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="58.7219%" y="101" width="0.0192%" height="15" fill="rgb(232,182,51)" fg:x="3060" fg:w="1"/><text x="58.9719%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Feq as simulator::instruction::InstructionTrait&gt;::exec (2 samples, 0.04%)</title><rect x="58.7411%" y="133" width="0.0384%" height="15" fill="rgb(231,60,39)" fg:x="3061" fg:w="2"/><text x="58.9911%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="58.7603%" y="117" width="0.0192%" height="15" fill="rgb(208,69,12)" fg:x="3062" fg:w="1"/><text x="59.0103%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="58.7603%" y="101" width="0.0192%" height="15" fill="rgb(235,93,37)" fg:x="3062" fg:w="1"/><text x="59.0103%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="58.8371%" y="101" width="0.0576%" height="15" fill="rgb(213,116,39)" fg:x="3066" fg:w="3"/><text x="59.0871%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fle as simulator::instruction::InstructionTrait&gt;::exec (7 samples, 0.13%)</title><rect x="58.7795%" y="133" width="0.1343%" height="15" fill="rgb(222,207,29)" fg:x="3063" fg:w="7"/><text x="59.0295%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.13%)</title><rect x="58.7795%" y="117" width="0.1343%" height="15" fill="rgb(206,96,30)" fg:x="3063" fg:w="7"/><text x="59.0295%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="58.8946%" y="101" width="0.0192%" height="15" fill="rgb(218,138,4)" fg:x="3069" fg:w="1"/><text x="59.1446%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="59.0098%" y="101" width="0.0384%" height="15" fill="rgb(250,191,14)" fg:x="3075" fg:w="2"/><text x="59.2598%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="59.0098%" y="85" width="0.0384%" height="15" fill="rgb(239,60,40)" fg:x="3075" fg:w="2"/><text x="59.2598%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Flt as simulator::instruction::InstructionTrait&gt;::exec (8 samples, 0.15%)</title><rect x="58.9138%" y="133" width="0.1535%" height="15" fill="rgb(206,27,48)" fg:x="3070" fg:w="8"/><text x="59.1638%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.10%)</title><rect x="58.9714%" y="117" width="0.0960%" height="15" fill="rgb(225,35,8)" fg:x="3073" fg:w="5"/><text x="59.2214%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="59.0482%" y="101" width="0.0192%" height="15" fill="rgb(250,213,24)" fg:x="3077" fg:w="1"/><text x="59.2982%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.10%)</title><rect x="59.0674%" y="133" width="0.0960%" height="15" fill="rgb(247,123,22)" fg:x="3078" fg:w="5"/><text x="59.3174%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.15%)</title><rect x="59.1825%" y="101" width="0.1535%" height="15" fill="rgb(231,138,38)" fg:x="3084" fg:w="8"/><text x="59.4325%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="59.2976%" y="85" width="0.0384%" height="15" fill="rgb(231,145,46)" fg:x="3090" fg:w="2"/><text x="59.5476%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Fmul as simulator::instruction::InstructionTrait&gt;::exec (12 samples, 0.23%)</title><rect x="59.1633%" y="133" width="0.2303%" height="15" fill="rgb(251,118,11)" fg:x="3083" fg:w="12"/><text x="59.4133%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.23%)</title><rect x="59.1633%" y="117" width="0.2303%" height="15" fill="rgb(217,147,25)" fg:x="3083" fg:w="12"/><text x="59.4133%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="59.3360%" y="101" width="0.0576%" height="15" fill="rgb(247,81,37)" fg:x="3092" fg:w="3"/><text x="59.5860%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsgnjn as simulator::instruction::InstructionTrait&gt;::exec (3 samples, 0.06%)</title><rect x="59.3936%" y="133" width="0.0576%" height="15" fill="rgb(209,12,38)" fg:x="3095" fg:w="3"/><text x="59.6436%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.04%)</title><rect x="59.4128%" y="117" width="0.0384%" height="15" fill="rgb(227,1,9)" fg:x="3096" fg:w="2"/><text x="59.6628%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="59.4320%" y="101" width="0.0192%" height="15" fill="rgb(248,47,43)" fg:x="3097" fg:w="1"/><text x="59.6820%" y="111.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (3 samples, 0.06%)</title><rect x="59.4704%" y="117" width="0.0576%" height="15" fill="rgb(221,10,30)" fg:x="3099" fg:w="3"/><text x="59.7204%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="59.5663%" y="101" width="0.0384%" height="15" fill="rgb(210,229,1)" fg:x="3104" fg:w="2"/><text x="59.8163%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="59.5855%" y="85" width="0.0192%" height="15" fill="rgb(222,148,37)" fg:x="3105" fg:w="1"/><text x="59.8355%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Fsub as simulator::instruction::InstructionTrait&gt;::exec (10 samples, 0.19%)</title><rect x="59.4512%" y="133" width="0.1919%" height="15" fill="rgb(234,67,33)" fg:x="3098" fg:w="10"/><text x="59.7012%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.12%)</title><rect x="59.5279%" y="117" width="0.1151%" height="15" fill="rgb(247,98,35)" fg:x="3102" fg:w="6"/><text x="59.7779%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.04%)</title><rect x="59.6047%" y="101" width="0.0384%" height="15" fill="rgb(247,138,52)" fg:x="3106" fg:w="2"/><text x="59.8547%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="59.6431%" y="133" width="0.0192%" height="15" fill="rgb(213,79,30)" fg:x="3108" fg:w="1"/><text x="59.8931%" y="143.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="60.1420%" y="117" width="0.0192%" height="15" fill="rgb(246,177,23)" fg:x="3134" fg:w="1"/><text x="60.3920%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="60.1612%" y="117" width="0.0576%" height="15" fill="rgb(230,62,27)" fg:x="3135" fg:w="3"/><text x="60.4112%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="60.2188%" y="117" width="0.0384%" height="15" fill="rgb(216,154,8)" fg:x="3138" fg:w="2"/><text x="60.4688%" y="127.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="60.2571%" y="117" width="0.0576%" height="15" fill="rgb(244,35,45)" fg:x="3140" fg:w="3"/><text x="60.5071%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="60.3147%" y="117" width="0.0384%" height="15" fill="rgb(251,115,12)" fg:x="3143" fg:w="2"/><text x="60.5647%" y="127.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (42 samples, 0.81%)</title><rect x="59.6623%" y="133" width="0.8060%" height="15" fill="rgb(240,54,50)" fg:x="3109" fg:w="42"/><text x="59.9123%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="60.3531%" y="117" width="0.1151%" height="15" fill="rgb(233,84,52)" fg:x="3145" fg:w="6"/><text x="60.6031%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="60.6218%" y="101" width="0.0768%" height="15" fill="rgb(207,117,47)" fg:x="3159" fg:w="4"/><text x="60.8718%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jal as simulator::instruction::InstructionTrait&gt;::exec (17 samples, 0.33%)</title><rect x="60.4682%" y="133" width="0.3262%" height="15" fill="rgb(249,43,39)" fg:x="3151" fg:w="17"/><text x="60.7182%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.31%)</title><rect x="60.4874%" y="117" width="0.3070%" height="15" fill="rgb(209,38,44)" fg:x="3152" fg:w="16"/><text x="60.7374%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.10%)</title><rect x="60.6985%" y="101" width="0.0960%" height="15" fill="rgb(236,212,23)" fg:x="3163" fg:w="5"/><text x="60.9485%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="60.7945%" y="133" width="0.0192%" height="15" fill="rgb(242,79,21)" fg:x="3168" fg:w="1"/><text x="61.0445%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="60.7945%" y="117" width="0.0192%" height="15" fill="rgb(211,96,35)" fg:x="3168" fg:w="1"/><text x="61.0445%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="60.7945%" y="101" width="0.0192%" height="15" fill="rgb(253,215,40)" fg:x="3168" fg:w="1"/><text x="61.0445%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="60.9096%" y="101" width="0.0768%" height="15" fill="rgb(211,81,21)" fg:x="3174" fg:w="4"/><text x="61.1596%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="60.9480%" y="85" width="0.0384%" height="15" fill="rgb(208,190,38)" fg:x="3176" fg:w="2"/><text x="61.1980%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Lui as simulator::instruction::InstructionTrait&gt;::exec (12 samples, 0.23%)</title><rect x="60.8137%" y="133" width="0.2303%" height="15" fill="rgb(235,213,38)" fg:x="3169" fg:w="12"/><text x="61.0637%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.21%)</title><rect x="60.8329%" y="117" width="0.2111%" height="15" fill="rgb(237,122,38)" fg:x="3170" fg:w="11"/><text x="61.0829%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="60.9864%" y="101" width="0.0576%" height="15" fill="rgb(244,218,35)" fg:x="3178" fg:w="3"/><text x="61.2364%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.10%)</title><rect x="61.0439%" y="133" width="0.0960%" height="15" fill="rgb(240,68,47)" fg:x="3181" fg:w="5"/><text x="61.2939%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.25%)</title><rect x="61.2934%" y="101" width="0.2495%" height="15" fill="rgb(210,16,53)" fg:x="3194" fg:w="13"/><text x="61.5434%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="61.4853%" y="85" width="0.0576%" height="15" fill="rgb(235,124,12)" fg:x="3204" fg:w="3"/><text x="61.7353%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::exec (24 samples, 0.46%)</title><rect x="61.1399%" y="133" width="0.4606%" height="15" fill="rgb(224,169,11)" fg:x="3186" fg:w="24"/><text x="61.3899%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.42%)</title><rect x="61.1783%" y="117" width="0.4222%" height="15" fill="rgb(250,166,2)" fg:x="3188" fg:w="22"/><text x="61.4283%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="61.5429%" y="101" width="0.0576%" height="15" fill="rgb(242,216,29)" fg:x="3207" fg:w="3"/><text x="61.7929%" y="111.50"></text></g><g><title>simulator::instruction::exec_instruction (512 samples, 9.83%)</title><rect x="51.8519%" y="149" width="9.8254%" height="15" fill="rgb(230,116,27)" fg:x="2702" fg:w="512"/><text x="52.1019%" y="159.50">simulator::ins..</text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::exec (4 samples, 0.08%)</title><rect x="61.6005%" y="133" width="0.0768%" height="15" fill="rgb(228,99,48)" fg:x="3210" fg:w="4"/><text x="61.8505%" y="143.50"></text></g><g><title>simulator::instruction::get_destination_register (33 samples, 0.63%)</title><rect x="61.6772%" y="149" width="0.6333%" height="15" fill="rgb(253,11,6)" fg:x="3214" fg:w="33"/><text x="61.9272%" y="159.50"></text></g><g><title>simulator::instruction::get_instruction_count (16 samples, 0.31%)</title><rect x="62.3105%" y="149" width="0.3070%" height="15" fill="rgb(247,143,39)" fg:x="3247" fg:w="16"/><text x="62.5605%" y="159.50"></text></g><g><title>simulator::instruction::get_jump_address (14 samples, 0.27%)</title><rect x="62.6175%" y="149" width="0.2687%" height="15" fill="rgb(236,97,10)" fg:x="3263" fg:w="14"/><text x="62.8675%" y="159.50"></text></g><g><title>alloc::alloc::box_free (3 samples, 0.06%)</title><rect x="64.7860%" y="133" width="0.0576%" height="15" fill="rgb(233,208,19)" fg:x="3376" fg:w="3"/><text x="65.0360%" y="143.50"></text></g><g><title>simulator::instruction::get_name (135 samples, 2.59%)</title><rect x="62.8862%" y="149" width="2.5907%" height="15" fill="rgb(216,164,2)" fg:x="3277" fg:w="135"/><text x="63.1362%" y="159.50">si..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (33 samples, 0.63%)</title><rect x="64.8436%" y="133" width="0.6333%" height="15" fill="rgb(220,129,5)" fg:x="3379" fg:w="33"/><text x="65.0936%" y="143.50"></text></g><g><title>__rdl_alloc (8 samples, 0.15%)</title><rect x="65.3234%" y="117" width="0.1535%" height="15" fill="rgb(242,17,10)" fg:x="3404" fg:w="8"/><text x="65.5734%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.15%)</title><rect x="65.3234%" y="101" width="0.1535%" height="15" fill="rgb(242,107,0)" fg:x="3404" fg:w="8"/><text x="65.5734%" y="111.50"></text></g><g><title>simulator::instruction::get_source_registers (16 samples, 0.31%)</title><rect x="65.4769%" y="149" width="0.3070%" height="15" fill="rgb(251,28,31)" fg:x="3412" fg:w="16"/><text x="65.7269%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.27%)</title><rect x="70.1209%" y="101" width="0.2687%" height="15" fill="rgb(233,223,10)" fg:x="3654" fg:w="14"/><text x="70.3709%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="70.3320%" y="85" width="0.0576%" height="15" fill="rgb(215,21,27)" fg:x="3665" fg:w="3"/><text x="70.5820%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.73%)</title><rect x="69.8906%" y="117" width="0.7292%" height="15" fill="rgb(232,23,21)" fg:x="3642" fg:w="38"/><text x="70.1406%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.23%)</title><rect x="70.3896%" y="101" width="0.2303%" height="15" fill="rgb(244,5,23)" fg:x="3668" fg:w="12"/><text x="70.6396%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.40%)</title><rect x="71.1188%" y="69" width="0.4030%" height="15" fill="rgb(226,81,46)" fg:x="3706" fg:w="21"/><text x="71.3688%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="71.5026%" y="53" width="0.0192%" height="15" fill="rgb(247,70,30)" fg:x="3726" fg:w="1"/><text x="71.7526%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="71.5026%" y="37" width="0.0192%" height="15" fill="rgb(212,68,19)" fg:x="3726" fg:w="1"/><text x="71.7526%" y="47.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="71.5218%" y="69" width="0.0192%" height="15" fill="rgb(240,187,13)" fg:x="3727" fg:w="1"/><text x="71.7718%" y="79.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (42 samples, 0.81%)</title><rect x="70.9653%" y="85" width="0.8060%" height="15" fill="rgb(223,113,26)" fg:x="3698" fg:w="42"/><text x="71.2153%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12 samples, 0.23%)</title><rect x="71.5410%" y="69" width="0.2303%" height="15" fill="rgb(206,192,2)" fg:x="3728" fg:w="12"/><text x="71.7910%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (20 samples, 0.38%)</title><rect x="71.7713%" y="85" width="0.3838%" height="15" fill="rgb(241,108,4)" fg:x="3740" fg:w="20"/><text x="72.0213%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (67 samples, 1.29%)</title><rect x="72.1551%" y="85" width="1.2857%" height="15" fill="rgb(247,173,49)" fg:x="3760" fg:w="67"/><text x="72.4051%" y="95.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_full (33 samples, 0.63%)</title><rect x="72.8075%" y="69" width="0.6333%" height="15" fill="rgb(224,114,35)" fg:x="3794" fg:w="33"/><text x="73.0575%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (15 samples, 0.29%)</title><rect x="73.1529%" y="53" width="0.2879%" height="15" fill="rgb(245,159,27)" fg:x="3812" fg:w="15"/><text x="73.4029%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::memory (204 samples, 3.91%)</title><rect x="69.7563%" y="133" width="3.9148%" height="15" fill="rgb(245,172,44)" fg:x="3635" fg:w="204"/><text x="70.0063%" y="143.50">&lt;sim..</text></g><g><title>simulator::core::Core::load_word (159 samples, 3.05%)</title><rect x="70.6198%" y="117" width="3.0512%" height="15" fill="rgb(236,23,11)" fg:x="3680" fg:w="159"/><text x="70.8698%" y="127.50">sim..</text></g><g><title>simulator::cache::Cache::get_word (158 samples, 3.03%)</title><rect x="70.6390%" y="101" width="3.0320%" height="15" fill="rgb(205,117,38)" fg:x="3681" fg:w="158"/><text x="70.8890%" y="111.50">sim..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (12 samples, 0.23%)</title><rect x="73.4408%" y="85" width="0.2303%" height="15" fill="rgb(237,72,25)" fg:x="3827" fg:w="12"/><text x="73.6908%" y="95.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="73.6519%" y="69" width="0.0192%" height="15" fill="rgb(244,70,9)" fg:x="3838" fg:w="1"/><text x="73.9019%" y="79.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::memory (2 samples, 0.04%)</title><rect x="73.6711%" y="133" width="0.0384%" height="15" fill="rgb(217,125,39)" fg:x="3839" fg:w="2"/><text x="73.9211%" y="143.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="74.3811%" y="117" width="0.0384%" height="15" fill="rgb(235,36,10)" fg:x="3876" fg:w="2"/><text x="74.6311%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="74.4195%" y="117" width="0.0384%" height="15" fill="rgb(251,123,47)" fg:x="3878" fg:w="2"/><text x="74.6695%" y="127.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="74.4579%" y="117" width="0.0192%" height="15" fill="rgb(221,13,13)" fg:x="3880" fg:w="1"/><text x="74.7079%" y="127.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (48 samples, 0.92%)</title><rect x="73.7095%" y="133" width="0.9211%" height="15" fill="rgb(238,131,9)" fg:x="3841" fg:w="48"/><text x="73.9595%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (8 samples, 0.15%)</title><rect x="74.4771%" y="117" width="0.1535%" height="15" fill="rgb(211,50,8)" fg:x="3881" fg:w="8"/><text x="74.7271%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.56%)</title><rect x="74.9760%" y="101" width="0.5565%" height="15" fill="rgb(245,182,24)" fg:x="3907" fg:w="29"/><text x="75.2260%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="75.4174%" y="85" width="0.1151%" height="15" fill="rgb(242,14,37)" fg:x="3930" fg:w="6"/><text x="75.6674%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (57 samples, 1.09%)</title><rect x="74.8225%" y="117" width="1.0938%" height="15" fill="rgb(246,228,12)" fg:x="3899" fg:w="57"/><text x="75.0725%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.38%)</title><rect x="75.5325%" y="101" width="0.3838%" height="15" fill="rgb(213,55,15)" fg:x="3936" fg:w="20"/><text x="75.7825%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.69%)</title><rect x="76.6839%" y="69" width="0.6908%" height="15" fill="rgb(209,9,3)" fg:x="3996" fg:w="36"/><text x="76.9339%" y="79.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (65 samples, 1.25%)</title><rect x="76.4920%" y="85" width="1.2474%" height="15" fill="rgb(230,59,30)" fg:x="3986" fg:w="65"/><text x="76.7420%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (19 samples, 0.36%)</title><rect x="77.3748%" y="69" width="0.3646%" height="15" fill="rgb(209,121,21)" fg:x="4032" fg:w="19"/><text x="77.6248%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (38 samples, 0.73%)</title><rect x="77.7394%" y="85" width="0.7292%" height="15" fill="rgb(220,109,13)" fg:x="4051" fg:w="38"/><text x="77.9894%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (93 samples, 1.78%)</title><rect x="78.4686%" y="85" width="1.7847%" height="15" fill="rgb(232,18,1)" fg:x="4089" fg:w="93"/><text x="78.7186%" y="95.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_full (40 samples, 0.77%)</title><rect x="79.4857%" y="69" width="0.7676%" height="15" fill="rgb(215,41,42)" fg:x="4142" fg:w="40"/><text x="79.7357%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (12 samples, 0.23%)</title><rect x="80.0230%" y="53" width="0.2303%" height="15" fill="rgb(224,123,36)" fg:x="4170" fg:w="12"/><text x="80.2730%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::memory (315 samples, 6.04%)</title><rect x="74.6306%" y="133" width="6.0449%" height="15" fill="rgb(240,125,3)" fg:x="3889" fg:w="315"/><text x="74.8806%" y="143.50">&lt;simulat..</text></g><g><title>simulator::core::Core::load_word (248 samples, 4.76%)</title><rect x="75.9163%" y="117" width="4.7592%" height="15" fill="rgb(205,98,50)" fg:x="3956" fg:w="248"/><text x="76.1663%" y="127.50">simula..</text></g><g><title>simulator::cache::Cache::get_word (244 samples, 4.68%)</title><rect x="75.9931%" y="101" width="4.6824%" height="15" fill="rgb(205,185,37)" fg:x="3960" fg:w="244"/><text x="76.2431%" y="111.50">simul..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (22 samples, 0.42%)</title><rect x="80.2533%" y="85" width="0.4222%" height="15" fill="rgb(238,207,15)" fg:x="4182" fg:w="22"/><text x="80.5033%" y="95.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (6 samples, 0.12%)</title><rect x="80.5604%" y="69" width="0.1151%" height="15" fill="rgb(213,199,42)" fg:x="4198" fg:w="6"/><text x="80.8104%" y="79.50"></text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::memory (6 samples, 0.12%)</title><rect x="80.6755%" y="133" width="0.1151%" height="15" fill="rgb(235,201,11)" fg:x="4204" fg:w="6"/><text x="80.9255%" y="143.50"></text></g><g><title>simulator::cache::Cache::set_uhalf (1 samples, 0.02%)</title><rect x="80.8482%" y="117" width="0.0192%" height="15" fill="rgb(207,46,11)" fg:x="4213" fg:w="1"/><text x="81.0982%" y="127.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (40 samples, 0.77%)</title><rect x="81.5582%" y="101" width="0.7676%" height="15" fill="rgb(241,35,35)" fg:x="4250" fg:w="40"/><text x="81.8082%" y="111.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (87 samples, 1.67%)</title><rect x="82.3258%" y="101" width="1.6695%" height="15" fill="rgb(243,32,47)" fg:x="4290" fg:w="87"/><text x="82.5758%" y="111.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_full (49 samples, 0.94%)</title><rect x="83.0551%" y="85" width="0.9403%" height="15" fill="rgb(247,202,23)" fg:x="4328" fg:w="49"/><text x="83.3051%" y="95.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (18 samples, 0.35%)</title><rect x="83.6500%" y="69" width="0.3454%" height="15" fill="rgb(219,102,11)" fg:x="4359" fg:w="18"/><text x="83.9000%" y="79.50"></text></g><g><title>simulator::instruction::memory_access (960 samples, 18.42%)</title><rect x="65.7839%" y="149" width="18.4226%" height="15" fill="rgb(243,110,44)" fg:x="3428" fg:w="960"/><text x="66.0339%" y="159.50">simulator::instruction::memor..</text></g><g><title>simulator::core::Core::store_word (178 samples, 3.42%)</title><rect x="80.7906%" y="133" width="3.4159%" height="15" fill="rgb(222,74,54)" fg:x="4210" fg:w="178"/><text x="81.0406%" y="143.50">sim..</text></g><g><title>simulator::cache::Cache::set_word (174 samples, 3.34%)</title><rect x="80.8674%" y="117" width="3.3391%" height="15" fill="rgb(216,99,12)" fg:x="4214" fg:w="174"/><text x="81.1174%" y="127.50">sim..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (11 samples, 0.21%)</title><rect x="83.9954%" y="101" width="0.2111%" height="15" fill="rgb(226,22,26)" fg:x="4377" fg:w="11"/><text x="84.2454%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="84.1489%" y="85" width="0.0576%" height="15" fill="rgb(217,163,10)" fg:x="4385" fg:w="3"/><text x="84.3989%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Beq as simulator::instruction::InstructionTrait&gt;::register_fetch (21 samples, 0.40%)</title><rect x="88.5627%" y="133" width="0.4030%" height="15" fill="rgb(213,25,53)" fg:x="4615" fg:w="21"/><text x="88.8127%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.19%)</title><rect x="88.7737%" y="117" width="0.1919%" height="15" fill="rgb(252,105,26)" fg:x="4626" fg:w="10"/><text x="89.0237%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Bgeu as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.10%)</title><rect x="88.9656%" y="133" width="0.0960%" height="15" fill="rgb(220,39,43)" fg:x="4636" fg:w="5"/><text x="89.2156%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Feq as simulator::instruction::InstructionTrait&gt;::register_fetch (31 samples, 0.59%)</title><rect x="89.0616%" y="133" width="0.5949%" height="15" fill="rgb(229,68,48)" fg:x="4641" fg:w="31"/><text x="89.3116%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.25%)</title><rect x="89.4070%" y="117" width="0.2495%" height="15" fill="rgb(252,8,32)" fg:x="4659" fg:w="13"/><text x="89.6570%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="89.6181%" y="101" width="0.0384%" height="15" fill="rgb(223,20,43)" fg:x="4670" fg:w="2"/><text x="89.8681%" y="111.50"></text></g><g><title>&lt;simulator::instruction::FmvWX as simulator::instruction::InstructionTrait&gt;::register_fetch (2 samples, 0.04%)</title><rect x="89.6565%" y="133" width="0.0384%" height="15" fill="rgb(229,81,49)" fg:x="4672" fg:w="2"/><text x="89.9065%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="89.6757%" y="117" width="0.0192%" height="15" fill="rgb(236,28,36)" fg:x="4673" fg:w="1"/><text x="89.9257%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::register_fetch (23 samples, 0.44%)</title><rect x="89.6949%" y="133" width="0.4414%" height="15" fill="rgb(249,185,26)" fg:x="4674" fg:w="23"/><text x="89.9449%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.29%)</title><rect x="89.8484%" y="117" width="0.2879%" height="15" fill="rgb(249,174,33)" fg:x="4682" fg:w="15"/><text x="90.0984%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="90.0787%" y="101" width="0.0576%" height="15" fill="rgb(233,201,37)" fg:x="4694" fg:w="3"/><text x="90.3287%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="90.9422%" y="117" width="0.0576%" height="15" fill="rgb(221,78,26)" fg:x="4739" fg:w="3"/><text x="91.1922%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="90.9998%" y="117" width="0.0576%" height="15" fill="rgb(250,127,30)" fg:x="4742" fg:w="3"/><text x="91.2498%" y="127.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="91.0574%" y="117" width="0.0192%" height="15" fill="rgb(230,49,44)" fg:x="4745" fg:w="1"/><text x="91.3074%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="91.0766%" y="117" width="0.0384%" height="15" fill="rgb(229,67,23)" fg:x="4746" fg:w="2"/><text x="91.3266%" y="127.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (56 samples, 1.07%)</title><rect x="90.1363%" y="133" width="1.0746%" height="15" fill="rgb(249,83,47)" fg:x="4697" fg:w="56"/><text x="90.3863%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="91.1149%" y="117" width="0.0960%" height="15" fill="rgb(215,43,3)" fg:x="4748" fg:w="5"/><text x="91.3649%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::register_fetch (11 samples, 0.21%)</title><rect x="91.2109%" y="133" width="0.2111%" height="15" fill="rgb(238,154,13)" fg:x="4753" fg:w="11"/><text x="91.4609%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.12%)</title><rect x="91.3069%" y="117" width="0.1151%" height="15" fill="rgb(219,56,2)" fg:x="4758" fg:w="6"/><text x="91.5569%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lb as simulator::instruction::InstructionTrait&gt;::register_fetch (82 samples, 1.57%)</title><rect x="91.4220%" y="133" width="1.5736%" height="15" fill="rgb(233,0,4)" fg:x="4764" fg:w="82"/><text x="91.6720%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (48 samples, 0.92%)</title><rect x="92.0745%" y="117" width="0.9211%" height="15" fill="rgb(235,30,7)" fg:x="4798" fg:w="48"/><text x="92.3245%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.17%)</title><rect x="92.8229%" y="101" width="0.1727%" height="15" fill="rgb(250,79,13)" fg:x="4837" fg:w="9"/><text x="93.0729%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Or as simulator::instruction::InstructionTrait&gt;::register_fetch (35 samples, 0.67%)</title><rect x="92.9956%" y="133" width="0.6717%" height="15" fill="rgb(211,146,34)" fg:x="4846" fg:w="35"/><text x="93.2456%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.38%)</title><rect x="93.2834%" y="117" width="0.3838%" height="15" fill="rgb(228,22,38)" fg:x="4861" fg:w="20"/><text x="93.5334%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="93.6097%" y="101" width="0.0576%" height="15" fill="rgb(235,168,5)" fg:x="4878" fg:w="3"/><text x="93.8597%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Ori as simulator::instruction::InstructionTrait&gt;::register_fetch (45 samples, 0.86%)</title><rect x="93.6672%" y="133" width="0.8636%" height="15" fill="rgb(221,155,16)" fg:x="4881" fg:w="45"/><text x="93.9172%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.36%)</title><rect x="94.1662%" y="117" width="0.3646%" height="15" fill="rgb(215,215,53)" fg:x="4907" fg:w="19"/><text x="94.4162%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="94.4157%" y="101" width="0.1151%" height="15" fill="rgb(223,4,10)" fg:x="4920" fg:w="6"/><text x="94.6657%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Sb as simulator::instruction::InstructionTrait&gt;::register_fetch (38 samples, 0.73%)</title><rect x="94.5308%" y="133" width="0.7292%" height="15" fill="rgb(234,103,6)" fg:x="4926" fg:w="38"/><text x="94.7808%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.38%)</title><rect x="94.8762%" y="117" width="0.3838%" height="15" fill="rgb(227,97,0)" fg:x="4944" fg:w="20"/><text x="95.1262%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="95.2025%" y="101" width="0.0576%" height="15" fill="rgb(234,150,53)" fg:x="4961" fg:w="3"/><text x="95.4525%" y="111.50"></text></g><g><title>simulator::instruction::register_fetch (596 samples, 11.44%)</title><rect x="84.2065%" y="149" width="11.4373%" height="15" fill="rgb(228,201,54)" fg:x="4388" fg:w="596"/><text x="84.4565%" y="159.50">simulator::instru..</text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::register_fetch (20 samples, 0.38%)</title><rect x="95.2600%" y="133" width="0.3838%" height="15" fill="rgb(222,22,37)" fg:x="4964" fg:w="20"/><text x="95.5100%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.27%)</title><rect x="95.3752%" y="117" width="0.2687%" height="15" fill="rgb(237,53,32)" fg:x="4970" fg:w="14"/><text x="95.6252%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.08%)</title><rect x="95.5671%" y="101" width="0.0768%" height="15" fill="rgb(233,25,53)" fg:x="4980" fg:w="4"/><text x="95.8171%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::write_back (3 samples, 0.06%)</title><rect x="98.3880%" y="133" width="0.0576%" height="15" fill="rgb(210,40,34)" fg:x="5127" fg:w="3"/><text x="98.6380%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::write_back (13 samples, 0.25%)</title><rect x="98.4456%" y="133" width="0.2495%" height="15" fill="rgb(241,220,44)" fg:x="5130" fg:w="13"/><text x="98.6956%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Fadd as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="98.6951%" y="133" width="0.0192%" height="15" fill="rgb(235,28,35)" fg:x="5143" fg:w="1"/><text x="98.9451%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="98.7143%" y="133" width="0.0384%" height="15" fill="rgb(210,56,17)" fg:x="5144" fg:w="2"/><text x="98.9643%" y="143.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.3667%" y="117" width="0.0192%" height="15" fill="rgb(224,130,29)" fg:x="5178" fg:w="1"/><text x="99.6167%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="99.3859%" y="117" width="0.0960%" height="15" fill="rgb(235,212,8)" fg:x="5179" fg:w="5"/><text x="99.6359%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="99.4819%" y="117" width="0.0576%" height="15" fill="rgb(223,33,50)" fg:x="5184" fg:w="3"/><text x="99.7319%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="99.5394%" y="117" width="0.0384%" height="15" fill="rgb(219,149,13)" fg:x="5187" fg:w="2"/><text x="99.7894%" y="127.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (48 samples, 0.92%)</title><rect x="98.7526%" y="133" width="0.9211%" height="15" fill="rgb(250,156,29)" fg:x="5146" fg:w="48"/><text x="99.0026%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="99.5778%" y="117" width="0.0960%" height="15" fill="rgb(216,193,19)" fg:x="5189" fg:w="5"/><text x="99.8278%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jal as simulator::instruction::InstructionTrait&gt;::write_back (5 samples, 0.10%)</title><rect x="99.6738%" y="133" width="0.0960%" height="15" fill="rgb(216,135,14)" fg:x="5194" fg:w="5"/><text x="99.9238%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::write_back (3 samples, 0.06%)</title><rect x="99.7697%" y="133" width="0.0576%" height="15" fill="rgb(241,47,5)" fg:x="5199" fg:w="3"/><text x="100.0197%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Lui as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="99.8273%" y="133" width="0.0192%" height="15" fill="rgb(233,42,35)" fg:x="5202" fg:w="1"/><text x="100.0773%" y="143.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::write_back (5 samples, 0.10%)</title><rect x="99.8465%" y="133" width="0.0960%" height="15" fill="rgb(231,13,6)" fg:x="5203" fg:w="5"/><text x="100.0965%" y="143.50"></text></g><g><title>all (5,211 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="447.50"></text></g><g><title>simulator (5,211 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="431.50">simulator</text></g><g><title>_start (5,211 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="415.50">_start</text></g><g><title>__libc_start_main (5,211 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="399.50">__libc_start_main</text></g><g><title>main (5,211 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (5,211 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,211 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="351.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,211 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="335.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,211 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="319.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,211 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="303.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,211 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="287.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,211 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="271.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,211 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="255.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,211 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="239.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,211 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="223.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,211 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="207.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simulator::main (5,211 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="191.50">simulator::main</text></g><g><title>simulator::core::Core::run (5,211 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="5211"/><text x="0.2500%" y="175.50">simulator::core::Core::run</text></g><g><title>simulator::instruction::write_back (227 samples, 4.36%)</title><rect x="95.6438%" y="149" width="4.3562%" height="15" fill="rgb(227,165,31)" fg:x="4984" fg:w="227"/><text x="95.8938%" y="159.50">simul..</text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::write_back (3 samples, 0.06%)</title><rect x="99.9424%" y="133" width="0.0576%" height="15" fill="rgb(228,167,24)" fg:x="5208" fg:w="3"/><text x="100.1924%" y="143.50"></text></g></svg></svg>