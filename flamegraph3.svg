<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="5345"><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="19.7194%" y="117" width="0.0374%" height="15" fill="rgb(227,0,7)" fg:x="1054" fg:w="2"/><text x="19.9694%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (11 samples, 0.21%)</title><rect x="19.7568%" y="117" width="0.2058%" height="15" fill="rgb(217,0,24)" fg:x="1056" fg:w="11"/><text x="20.0068%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.09%)</title><rect x="19.9626%" y="117" width="0.0935%" height="15" fill="rgb(221,193,54)" fg:x="1067" fg:w="5"/><text x="20.2126%" y="127.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (6 samples, 0.11%)</title><rect x="20.0561%" y="117" width="0.1123%" height="15" fill="rgb(248,212,6)" fg:x="1072" fg:w="6"/><text x="20.3061%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="20.1684%" y="117" width="0.0748%" height="15" fill="rgb(208,68,35)" fg:x="1078" fg:w="4"/><text x="20.4184%" y="127.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (202 samples, 3.78%)</title><rect x="16.9504%" y="133" width="3.7792%" height="15" fill="rgb(232,128,0)" fg:x="906" fg:w="202"/><text x="17.2004%" y="143.50">&lt;sim..</text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (26 samples, 0.49%)</title><rect x="20.2432%" y="117" width="0.4864%" height="15" fill="rgb(207,160,47)" fg:x="1082" fg:w="26"/><text x="20.4932%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (242 samples, 4.53%)</title><rect x="20.7297%" y="133" width="4.5276%" height="15" fill="rgb(228,23,34)" fg:x="1108" fg:w="242"/><text x="20.9797%" y="143.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 0.92%)</title><rect x="24.3405%" y="117" width="0.9167%" height="15" fill="rgb(218,30,26)" fg:x="1301" fg:w="49"/><text x="24.5905%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (113 samples, 2.11%)</title><rect x="25.2572%" y="133" width="2.1141%" height="15" fill="rgb(220,122,19)" fg:x="1350" fg:w="113"/><text x="25.5072%" y="143.50">h..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (381 samples, 7.13%)</title><rect x="27.3714%" y="133" width="7.1282%" height="15" fill="rgb(250,228,42)" fg:x="1463" fg:w="381"/><text x="27.6214%" y="143.50">hashbrown:..</text></g><g><title>core::hash::BuildHasher::hash_one (215 samples, 4.02%)</title><rect x="30.4771%" y="117" width="4.0225%" height="15" fill="rgb(240,193,28)" fg:x="1629" fg:w="215"/><text x="30.7271%" y="127.50">core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 samples, 0.99%)</title><rect x="33.5080%" y="101" width="0.9916%" height="15" fill="rgb(216,20,37)" fg:x="1791" fg:w="53"/><text x="33.7580%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (362 samples, 6.77%)</title><rect x="37.6614%" y="101" width="6.7727%" height="15" fill="rgb(206,188,39)" fg:x="2013" fg:w="362"/><text x="37.9114%" y="111.50">&lt;core::it..</text></g><g><title>core::hash::BuildHasher::hash_one (185 samples, 3.46%)</title><rect x="40.9729%" y="85" width="3.4612%" height="15" fill="rgb(217,207,13)" fg:x="2190" fg:w="185"/><text x="41.2229%" y="95.50">cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.58%)</title><rect x="43.8541%" y="69" width="0.5800%" height="15" fill="rgb(231,73,38)" fg:x="2344" fg:w="31"/><text x="44.1041%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (470 samples, 8.79%)</title><rect x="35.6595%" y="117" width="8.7933%" height="15" fill="rgb(225,20,46)" fg:x="1906" fg:w="470"/><text x="35.9095%" y="127.50">&lt;alloc::vec:..</text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="44.4341%" y="101" width="0.0187%" height="15" fill="rgb(210,31,41)" fg:x="2375" fg:w="1"/><text x="44.6841%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="44.4341%" y="85" width="0.0187%" height="15" fill="rgb(221,200,47)" fg:x="2375" fg:w="1"/><text x="44.6841%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (3 samples, 0.06%)</title><rect x="44.4528%" y="117" width="0.0561%" height="15" fill="rgb(226,26,5)" fg:x="2376" fg:w="3"/><text x="44.7028%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (10 samples, 0.19%)</title><rect x="44.5089%" y="117" width="0.1871%" height="15" fill="rgb(249,33,26)" fg:x="2379" fg:w="10"/><text x="44.7589%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Beq as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (2 samples, 0.04%)</title><rect x="44.6960%" y="117" width="0.0374%" height="15" fill="rgb(235,183,28)" fg:x="2389" fg:w="2"/><text x="44.9460%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Bne as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (4 samples, 0.07%)</title><rect x="44.7334%" y="117" width="0.0748%" height="15" fill="rgb(221,5,38)" fg:x="2391" fg:w="4"/><text x="44.9834%" y="127.50"></text></g><g><title>&lt;simulator::instruction::FcvtSW as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (1 samples, 0.02%)</title><rect x="44.8082%" y="117" width="0.0187%" height="15" fill="rgb(247,18,42)" fg:x="2395" fg:w="1"/><text x="45.0582%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fle as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (1 samples, 0.02%)</title><rect x="44.8269%" y="117" width="0.0187%" height="15" fill="rgb(241,131,45)" fg:x="2396" fg:w="1"/><text x="45.0769%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (8 samples, 0.15%)</title><rect x="44.8457%" y="117" width="0.1497%" height="15" fill="rgb(249,31,29)" fg:x="2397" fg:w="8"/><text x="45.0957%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fmul as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (1 samples, 0.02%)</title><rect x="44.9953%" y="117" width="0.0187%" height="15" fill="rgb(225,111,53)" fg:x="2405" fg:w="1"/><text x="45.2453%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsub as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (1 samples, 0.02%)</title><rect x="45.0140%" y="117" width="0.0187%" height="15" fill="rgb(238,160,17)" fg:x="2406" fg:w="1"/><text x="45.2640%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (1 samples, 0.02%)</title><rect x="45.0327%" y="117" width="0.0187%" height="15" fill="rgb(214,148,48)" fg:x="2407" fg:w="1"/><text x="45.2827%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::pseudo_get_source_registers (2 samples, 0.04%)</title><rect x="45.6688%" y="101" width="0.0374%" height="15" fill="rgb(232,36,49)" fg:x="2441" fg:w="2"/><text x="45.9188%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lb as simulator::instruction::InstructionTrait&gt;::pseudo_get_source_registers (35 samples, 0.65%)</title><rect x="45.7063%" y="101" width="0.6548%" height="15" fill="rgb(209,103,24)" fg:x="2443" fg:w="35"/><text x="45.9563%" y="111.50"></text></g><g><title>__rdl_alloc (8 samples, 0.15%)</title><rect x="46.2114%" y="85" width="0.1497%" height="15" fill="rgb(229,88,8)" fg:x="2470" fg:w="8"/><text x="46.4614%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.15%)</title><rect x="46.2114%" y="69" width="0.1497%" height="15" fill="rgb(213,181,19)" fg:x="2470" fg:w="8"/><text x="46.4614%" y="79.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as simulator::instruction::InstructionTrait&gt;::pseudo_get_source_registers (77 samples, 1.44%)</title><rect x="45.0514%" y="117" width="1.4406%" height="15" fill="rgb(254,191,54)" fg:x="2408" fg:w="77"/><text x="45.3014%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Or as simulator::instruction::InstructionTrait&gt;::pseudo_get_source_registers (7 samples, 0.13%)</title><rect x="46.3611%" y="101" width="0.1310%" height="15" fill="rgb(241,83,37)" fg:x="2478" fg:w="7"/><text x="46.6111%" y="111.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="46.4546%" y="85" width="0.0374%" height="15" fill="rgb(233,36,39)" fg:x="2483" fg:w="2"/><text x="46.7046%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.04%)</title><rect x="46.4546%" y="69" width="0.0374%" height="15" fill="rgb(226,3,54)" fg:x="2483" fg:w="2"/><text x="46.7046%" y="79.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (46 samples, 0.86%)</title><rect x="46.4920%" y="117" width="0.8606%" height="15" fill="rgb(245,192,40)" fg:x="2485" fg:w="46"/><text x="46.7420%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (3 samples, 0.06%)</title><rect x="47.3527%" y="117" width="0.0561%" height="15" fill="rgb(238,167,29)" fg:x="2531" fg:w="3"/><text x="47.6027%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (8 samples, 0.15%)</title><rect x="47.4088%" y="117" width="0.1497%" height="15" fill="rgb(232,182,51)" fg:x="2534" fg:w="8"/><text x="47.6588%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (5 samples, 0.09%)</title><rect x="47.5585%" y="117" width="0.0935%" height="15" fill="rgb(231,60,39)" fg:x="2542" fg:w="5"/><text x="47.8085%" y="127.50"></text></g><g><title>simulator::core::Core::register_fetch (706 samples, 13.21%)</title><rect x="34.4995%" y="133" width="13.2086%" height="15" fill="rgb(208,69,12)" fg:x="1844" fg:w="706"/><text x="34.7495%" y="143.50">simulator::core::Cor..</text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::pseudo_register_fetch (3 samples, 0.06%)</title><rect x="47.6520%" y="117" width="0.0561%" height="15" fill="rgb(235,93,37)" fg:x="2547" fg:w="3"/><text x="47.9020%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (225 samples, 4.21%)</title><rect x="53.7512%" y="117" width="4.2095%" height="15" fill="rgb(213,116,39)" fg:x="2873" fg:w="225"/><text x="54.0012%" y="127.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 0.97%)</title><rect x="56.9878%" y="101" width="0.9729%" height="15" fill="rgb(222,207,29)" fg:x="3046" fg:w="52"/><text x="57.2378%" y="111.50"></text></g><g><title>simulator::core::Core::save_pc (678 samples, 12.68%)</title><rect x="47.7081%" y="133" width="12.6848%" height="15" fill="rgb(206,96,30)" fg:x="2550" fg:w="678"/><text x="47.9581%" y="143.50">simulator::core::Co..</text></g><g><title>simulator::decoder::decode_instruction (130 samples, 2.43%)</title><rect x="57.9607%" y="117" width="2.4322%" height="15" fill="rgb(218,138,4)" fg:x="3098" fg:w="130"/><text x="58.2107%" y="127.50">si..</text></g><g><title>simulator::decoder::decode_instruction (41 samples, 0.77%)</title><rect x="60.3929%" y="133" width="0.7671%" height="15" fill="rgb(250,191,14)" fg:x="3228" fg:w="41"/><text x="60.6429%" y="143.50"></text></g><g><title>simulator::instruction::create_instruction_struct (107 samples, 2.00%)</title><rect x="61.1600%" y="133" width="2.0019%" height="15" fill="rgb(239,60,40)" fg:x="3269" fg:w="107"/><text x="61.4100%" y="143.50">s..</text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.22%)</title><rect x="67.6520%" y="101" width="0.2245%" height="15" fill="rgb(206,27,48)" fg:x="3616" fg:w="12"/><text x="67.9020%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="67.8391%" y="85" width="0.0374%" height="15" fill="rgb(225,35,8)" fg:x="3626" fg:w="2"/><text x="68.0891%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::exec (19 samples, 0.36%)</title><rect x="67.5398%" y="117" width="0.3555%" height="15" fill="rgb(250,213,24)" fg:x="3610" fg:w="19"/><text x="67.7898%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="67.8765%" y="101" width="0.0187%" height="15" fill="rgb(247,123,22)" fg:x="3628" fg:w="1"/><text x="68.1265%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (34 samples, 0.64%)</title><rect x="68.2507%" y="101" width="0.6361%" height="15" fill="rgb(231,138,38)" fg:x="3648" fg:w="34"/><text x="68.5007%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="68.8494%" y="85" width="0.0374%" height="15" fill="rgb(231,145,46)" fg:x="3680" fg:w="2"/><text x="69.0994%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::exec (76 samples, 1.42%)</title><rect x="67.8952%" y="117" width="1.4219%" height="15" fill="rgb(251,118,11)" fg:x="3629" fg:w="76"/><text x="68.1452%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.43%)</title><rect x="68.8868%" y="101" width="0.4303%" height="15" fill="rgb(217,147,25)" fg:x="3682" fg:w="23"/><text x="69.1368%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Bne as simulator::instruction::InstructionTrait&gt;::exec (3 samples, 0.06%)</title><rect x="69.3171%" y="117" width="0.0561%" height="15" fill="rgb(247,81,37)" fg:x="3705" fg:w="3"/><text x="69.5671%" y="127.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (4 samples, 0.07%)</title><rect x="69.4855%" y="101" width="0.0748%" height="15" fill="rgb(209,12,38)" fg:x="3714" fg:w="4"/><text x="69.7355%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.09%)</title><rect x="69.5603%" y="101" width="0.0935%" height="15" fill="rgb(227,1,9)" fg:x="3718" fg:w="5"/><text x="69.8103%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.07%)</title><rect x="69.5790%" y="85" width="0.0748%" height="15" fill="rgb(248,47,43)" fg:x="3719" fg:w="4"/><text x="69.8290%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Fadd as simulator::instruction::InstructionTrait&gt;::exec (16 samples, 0.30%)</title><rect x="69.3732%" y="117" width="0.2993%" height="15" fill="rgb(221,10,30)" fg:x="3708" fg:w="16"/><text x="69.6232%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="69.6539%" y="101" width="0.0187%" height="15" fill="rgb(210,229,1)" fg:x="3723" fg:w="1"/><text x="69.9039%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="69.7287%" y="101" width="0.0374%" height="15" fill="rgb(222,148,37)" fg:x="3727" fg:w="2"/><text x="69.9787%" y="111.50"></text></g><g><title>&lt;simulator::instruction::FcvtSW as simulator::instruction::InstructionTrait&gt;::exec (6 samples, 0.11%)</title><rect x="69.6726%" y="117" width="0.1123%" height="15" fill="rgb(234,67,33)" fg:x="3724" fg:w="6"/><text x="69.9226%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="69.7661%" y="101" width="0.0187%" height="15" fill="rgb(247,98,35)" fg:x="3729" fg:w="1"/><text x="70.0161%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Feq as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="69.7848%" y="117" width="0.0187%" height="15" fill="rgb(247,138,52)" fg:x="3730" fg:w="1"/><text x="70.0348%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="69.7848%" y="101" width="0.0187%" height="15" fill="rgb(213,79,30)" fg:x="3730" fg:w="1"/><text x="70.0348%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="69.8410%" y="101" width="0.0561%" height="15" fill="rgb(246,177,23)" fg:x="3733" fg:w="3"/><text x="70.0910%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fle as simulator::instruction::InstructionTrait&gt;::exec (6 samples, 0.11%)</title><rect x="69.8036%" y="117" width="0.1123%" height="15" fill="rgb(230,62,27)" fg:x="3731" fg:w="6"/><text x="70.0536%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="69.8971%" y="101" width="0.0187%" height="15" fill="rgb(216,154,8)" fg:x="3736" fg:w="1"/><text x="70.1471%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Flt as simulator::instruction::InstructionTrait&gt;::exec (2 samples, 0.04%)</title><rect x="69.9158%" y="117" width="0.0374%" height="15" fill="rgb(244,35,45)" fg:x="3737" fg:w="2"/><text x="70.1658%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="69.9345%" y="101" width="0.0187%" height="15" fill="rgb(251,115,12)" fg:x="3738" fg:w="1"/><text x="70.1845%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::exec (8 samples, 0.15%)</title><rect x="69.9532%" y="117" width="0.1497%" height="15" fill="rgb(240,54,50)" fg:x="3739" fg:w="8"/><text x="70.2032%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.09%)</title><rect x="70.2526%" y="101" width="0.0935%" height="15" fill="rgb(233,84,52)" fg:x="3755" fg:w="5"/><text x="70.5026%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="70.2900%" y="85" width="0.0561%" height="15" fill="rgb(207,117,47)" fg:x="3757" fg:w="3"/><text x="70.5400%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Fmul as simulator::instruction::InstructionTrait&gt;::exec (16 samples, 0.30%)</title><rect x="70.1029%" y="117" width="0.2993%" height="15" fill="rgb(249,43,39)" fg:x="3747" fg:w="16"/><text x="70.3529%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="70.3461%" y="101" width="0.0561%" height="15" fill="rgb(209,38,44)" fg:x="3760" fg:w="3"/><text x="70.5961%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsqrt as simulator::instruction::InstructionTrait&gt;::exec (1 samples, 0.02%)</title><rect x="70.4022%" y="117" width="0.0187%" height="15" fill="rgb(236,212,23)" fg:x="3763" fg:w="1"/><text x="70.6522%" y="127.50"></text></g><g><title>simulator::fpu_emulator::sqrt_fp (1 samples, 0.02%)</title><rect x="70.4022%" y="101" width="0.0187%" height="15" fill="rgb(242,79,21)" fg:x="3763" fg:w="1"/><text x="70.6522%" y="111.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="70.4022%" y="85" width="0.0187%" height="15" fill="rgb(211,96,35)" fg:x="3763" fg:w="1"/><text x="70.6522%" y="95.50"></text></g><g><title>&lt;simulator::fpu_emulator::FloatingPoint as core::ops::arith::Add&gt;::add (3 samples, 0.06%)</title><rect x="70.4397%" y="101" width="0.0561%" height="15" fill="rgb(253,215,40)" fg:x="3765" fg:w="3"/><text x="70.6897%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsub as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.09%)</title><rect x="70.4210%" y="117" width="0.0935%" height="15" fill="rgb(211,81,21)" fg:x="3764" fg:w="5"/><text x="70.6710%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="70.4958%" y="101" width="0.0187%" height="15" fill="rgb(208,190,38)" fg:x="3768" fg:w="1"/><text x="70.7458%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::exec (2 samples, 0.04%)</title><rect x="70.5145%" y="117" width="0.0374%" height="15" fill="rgb(235,213,38)" fg:x="3769" fg:w="2"/><text x="70.7645%" y="127.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="71.2254%" y="101" width="0.0187%" height="15" fill="rgb(237,122,38)" fg:x="3807" fg:w="1"/><text x="71.4754%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="71.2442%" y="101" width="0.0374%" height="15" fill="rgb(244,218,35)" fg:x="3808" fg:w="2"/><text x="71.4942%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="71.2816%" y="101" width="0.0748%" height="15" fill="rgb(240,68,47)" fg:x="3810" fg:w="4"/><text x="71.5316%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="71.3564%" y="101" width="0.0187%" height="15" fill="rgb(210,16,53)" fg:x="3814" fg:w="1"/><text x="71.6064%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (45 samples, 0.84%)</title><rect x="70.5519%" y="117" width="0.8419%" height="15" fill="rgb(235,124,12)" fg:x="3771" fg:w="45"/><text x="70.8019%" y="127.50"></text></g><g><title>&lt;simulator::instruction::UInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="71.3751%" y="101" width="0.0187%" height="15" fill="rgb(224,169,11)" fg:x="3815" fg:w="1"/><text x="71.6251%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.24%)</title><rect x="71.5809%" y="101" width="0.2432%" height="15" fill="rgb(250,166,2)" fg:x="3826" fg:w="13"/><text x="71.8309%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.07%)</title><rect x="71.7493%" y="85" width="0.0748%" height="15" fill="rgb(242,216,29)" fg:x="3835" fg:w="4"/><text x="71.9993%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Jal as simulator::instruction::InstructionTrait&gt;::exec (27 samples, 0.51%)</title><rect x="71.3938%" y="117" width="0.5051%" height="15" fill="rgb(230,116,27)" fg:x="3816" fg:w="27"/><text x="71.6438%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.07%)</title><rect x="71.8241%" y="101" width="0.0748%" height="15" fill="rgb(228,99,48)" fg:x="3839" fg:w="4"/><text x="72.0741%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::exec (2 samples, 0.04%)</title><rect x="71.8990%" y="117" width="0.0374%" height="15" fill="rgb(253,11,6)" fg:x="3843" fg:w="2"/><text x="72.1490%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.17%)</title><rect x="72.0674%" y="101" width="0.1684%" height="15" fill="rgb(247,143,39)" fg:x="3852" fg:w="9"/><text x="72.3174%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="72.1983%" y="85" width="0.0374%" height="15" fill="rgb(236,97,10)" fg:x="3859" fg:w="2"/><text x="72.4483%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Lui as simulator::instruction::InstructionTrait&gt;::exec (18 samples, 0.34%)</title><rect x="71.9364%" y="117" width="0.3368%" height="15" fill="rgb(233,208,19)" fg:x="3845" fg:w="18"/><text x="72.1864%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.04%)</title><rect x="72.2357%" y="101" width="0.0374%" height="15" fill="rgb(216,164,2)" fg:x="3861" fg:w="2"/><text x="72.4857%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::exec (5 samples, 0.09%)</title><rect x="72.2732%" y="117" width="0.0935%" height="15" fill="rgb(220,129,5)" fg:x="3863" fg:w="5"/><text x="72.5232%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.19%)</title><rect x="72.4415%" y="101" width="0.1871%" height="15" fill="rgb(242,17,10)" fg:x="3872" fg:w="10"/><text x="72.6915%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="72.6099%" y="85" width="0.0187%" height="15" fill="rgb(242,107,0)" fg:x="3881" fg:w="1"/><text x="72.8599%" y="95.50"></text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::exec (17 samples, 0.32%)</title><rect x="72.3667%" y="117" width="0.3181%" height="15" fill="rgb(251,28,31)" fg:x="3868" fg:w="17"/><text x="72.6167%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.06%)</title><rect x="72.6286%" y="101" width="0.0561%" height="15" fill="rgb(233,223,10)" fg:x="3882" fg:w="3"/><text x="72.8786%" y="111.50"></text></g><g><title>simulator::instruction::exec_instruction (515 samples, 9.64%)</title><rect x="63.1618%" y="133" width="9.6352%" height="15" fill="rgb(215,21,27)" fg:x="3376" fg:w="515"/><text x="63.4118%" y="143.50">simulator::ins..</text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::exec (6 samples, 0.11%)</title><rect x="72.6848%" y="117" width="0.1123%" height="15" fill="rgb(232,23,21)" fg:x="3885" fg:w="6"/><text x="72.9348%" y="127.50"></text></g><g><title>simulator::instruction::get_destination_register (40 samples, 0.75%)</title><rect x="72.7970%" y="133" width="0.7484%" height="15" fill="rgb(244,5,23)" fg:x="3891" fg:w="40"/><text x="73.0470%" y="143.50"></text></g><g><title>simulator::instruction::get_instruction_count (20 samples, 0.37%)</title><rect x="73.5454%" y="133" width="0.3742%" height="15" fill="rgb(226,81,46)" fg:x="3931" fg:w="20"/><text x="73.7954%" y="143.50"></text></g><g><title>simulator::instruction::get_jump_address (17 samples, 0.32%)</title><rect x="73.9196%" y="133" width="0.3181%" height="15" fill="rgb(247,70,30)" fg:x="3951" fg:w="17"/><text x="74.1696%" y="143.50"></text></g><g><title>alloc::alloc::box_free (3 samples, 0.06%)</title><rect x="76.0337%" y="117" width="0.0561%" height="15" fill="rgb(212,68,19)" fg:x="4064" fg:w="3"/><text x="76.2837%" y="127.50"></text></g><g><title>simulator::instruction::get_name (137 samples, 2.56%)</title><rect x="74.2376%" y="133" width="2.5631%" height="15" fill="rgb(240,187,13)" fg:x="3968" fg:w="137"/><text x="74.4876%" y="143.50">si..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (38 samples, 0.71%)</title><rect x="76.0898%" y="117" width="0.7109%" height="15" fill="rgb(223,113,26)" fg:x="4067" fg:w="38"/><text x="76.3398%" y="127.50"></text></g><g><title>__rdl_alloc (7 samples, 0.13%)</title><rect x="76.6698%" y="101" width="0.1310%" height="15" fill="rgb(206,192,2)" fg:x="4098" fg:w="7"/><text x="76.9198%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.13%)</title><rect x="76.6698%" y="85" width="0.1310%" height="15" fill="rgb(241,108,4)" fg:x="4098" fg:w="7"/><text x="76.9198%" y="95.50"></text></g><g><title>simulator::instruction::get_source_registers (28 samples, 0.52%)</title><rect x="76.8007%" y="133" width="0.5239%" height="15" fill="rgb(247,173,49)" fg:x="4105" fg:w="28"/><text x="77.0507%" y="143.50"></text></g><g><title>__rdl_alloc (5 samples, 0.09%)</title><rect x="77.2311%" y="117" width="0.0935%" height="15" fill="rgb(224,114,35)" fg:x="4128" fg:w="5"/><text x="77.4811%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.09%)</title><rect x="77.2311%" y="101" width="0.0935%" height="15" fill="rgb(245,159,27)" fg:x="4128" fg:w="5"/><text x="77.4811%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.37%)</title><rect x="82.0767%" y="101" width="0.3742%" height="15" fill="rgb(245,172,44)" fg:x="4387" fg:w="20"/><text x="82.3267%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="82.4322%" y="85" width="0.0187%" height="15" fill="rgb(236,23,11)" fg:x="4406" fg:w="1"/><text x="82.6822%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.21%)</title><rect x="82.4509%" y="101" width="0.2058%" height="15" fill="rgb(205,117,38)" fg:x="4407" fg:w="11"/><text x="82.7009%" y="111.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (18 samples, 0.34%)</title><rect x="83.4986%" y="69" width="0.3368%" height="15" fill="rgb(237,72,25)" fg:x="4463" fg:w="18"/><text x="83.7486%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="83.7979%" y="53" width="0.0374%" height="15" fill="rgb(244,70,9)" fg:x="4479" fg:w="2"/><text x="84.0479%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (11 samples, 0.21%)</title><rect x="83.9476%" y="53" width="0.2058%" height="15" fill="rgb(217,125,39)" fg:x="4487" fg:w="11"/><text x="84.1976%" y="63.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (38 samples, 0.71%)</title><rect x="83.8354%" y="69" width="0.7109%" height="15" fill="rgb(235,36,10)" fg:x="4481" fg:w="38"/><text x="84.0854%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (21 samples, 0.39%)</title><rect x="84.1534%" y="53" width="0.3929%" height="15" fill="rgb(251,123,47)" fg:x="4498" fg:w="21"/><text x="84.4034%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.07%)</title><rect x="84.4715%" y="37" width="0.0748%" height="15" fill="rgb(221,13,13)" fg:x="4515" fg:w="4"/><text x="84.7215%" y="47.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (12 samples, 0.22%)</title><rect x="84.9018%" y="53" width="0.2245%" height="15" fill="rgb(238,131,9)" fg:x="4538" fg:w="12"/><text x="85.1518%" y="63.50"></text></g><g><title>simulator::cache::Cache::get_word (134 samples, 2.51%)</title><rect x="82.7315%" y="85" width="2.5070%" height="15" fill="rgb(211,50,8)" fg:x="4422" fg:w="134"/><text x="82.9815%" y="95.50">si..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (37 samples, 0.69%)</title><rect x="84.5463%" y="69" width="0.6922%" height="15" fill="rgb(245,182,24)" fg:x="4519" fg:w="37"/><text x="84.7963%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (6 samples, 0.11%)</title><rect x="85.1263%" y="53" width="0.1123%" height="15" fill="rgb(242,14,37)" fg:x="4550" fg:w="6"/><text x="85.3763%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="85.2198%" y="37" width="0.0187%" height="15" fill="rgb(246,228,12)" fg:x="4555" fg:w="1"/><text x="85.4698%" y="47.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::memory (181 samples, 3.39%)</title><rect x="81.8709%" y="117" width="3.3863%" height="15" fill="rgb(213,55,15)" fg:x="4376" fg:w="181"/><text x="82.1209%" y="127.50">&lt;si..</text></g><g><title>simulator::core::Core::load_word (139 samples, 2.60%)</title><rect x="82.6567%" y="101" width="2.6006%" height="15" fill="rgb(209,9,3)" fg:x="4418" fg:w="139"/><text x="82.9067%" y="111.50">si..</text></g><g><title>simulator::cache::Cache::set_line (1 samples, 0.02%)</title><rect x="85.2385%" y="85" width="0.0187%" height="15" fill="rgb(230,59,30)" fg:x="4556" fg:w="1"/><text x="85.4885%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (1 samples, 0.02%)</title><rect x="85.2385%" y="69" width="0.0187%" height="15" fill="rgb(209,121,21)" fg:x="4556" fg:w="1"/><text x="85.4885%" y="79.50"></text></g><g><title>&lt;simulator::instruction::Fsw as simulator::instruction::InstructionTrait&gt;::memory (2 samples, 0.04%)</title><rect x="85.2572%" y="117" width="0.0374%" height="15" fill="rgb(220,109,13)" fg:x="4557" fg:w="2"/><text x="85.5072%" y="127.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (5 samples, 0.09%)</title><rect x="86.1927%" y="101" width="0.0935%" height="15" fill="rgb(232,18,1)" fg:x="4607" fg:w="5"/><text x="86.4427%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="86.2862%" y="101" width="0.0374%" height="15" fill="rgb(215,41,42)" fg:x="4612" fg:w="2"/><text x="86.5362%" y="111.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="86.3237%" y="101" width="0.0187%" height="15" fill="rgb(224,123,36)" fg:x="4614" fg:w="1"/><text x="86.5737%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jalr as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="86.3424%" y="101" width="0.0374%" height="15" fill="rgb(240,125,3)" fg:x="4615" fg:w="2"/><text x="86.5924%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (65 samples, 1.22%)</title><rect x="85.2947%" y="117" width="1.2161%" height="15" fill="rgb(205,98,50)" fg:x="4559" fg:w="65"/><text x="85.5447%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="86.3798%" y="101" width="0.1310%" height="15" fill="rgb(205,185,37)" fg:x="4617" fg:w="7"/><text x="86.6298%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.41%)</title><rect x="87.0159%" y="101" width="0.4116%" height="15" fill="rgb(238,207,15)" fg:x="4651" fg:w="22"/><text x="87.2659%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="87.3714%" y="85" width="0.0561%" height="15" fill="rgb(213,199,42)" fg:x="4670" fg:w="3"/><text x="87.6214%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.45%)</title><rect x="87.4275%" y="101" width="0.4490%" height="15" fill="rgb(235,201,11)" fg:x="4673" fg:w="24"/><text x="87.6775%" y="111.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (36 samples, 0.67%)</title><rect x="88.7184%" y="69" width="0.6735%" height="15" fill="rgb(207,46,11)" fg:x="4742" fg:w="36"/><text x="88.9684%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.13%)</title><rect x="89.2610%" y="53" width="0.1310%" height="15" fill="rgb(241,35,35)" fg:x="4771" fg:w="7"/><text x="89.5110%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (14 samples, 0.26%)</title><rect x="89.7100%" y="53" width="0.2619%" height="15" fill="rgb(243,32,47)" fg:x="4795" fg:w="14"/><text x="89.9600%" y="63.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (61 samples, 1.14%)</title><rect x="89.3920%" y="69" width="1.1413%" height="15" fill="rgb(247,202,23)" fg:x="4778" fg:w="61"/><text x="89.6420%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (30 samples, 0.56%)</title><rect x="89.9719%" y="53" width="0.5613%" height="15" fill="rgb(219,102,11)" fg:x="4809" fg:w="30"/><text x="90.2219%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="90.4771%" y="37" width="0.0561%" height="15" fill="rgb(243,110,44)" fg:x="4836" fg:w="3"/><text x="90.7271%" y="47.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (25 samples, 0.47%)</title><rect x="91.0945%" y="53" width="0.4677%" height="15" fill="rgb(222,74,54)" fg:x="4869" fg:w="25"/><text x="91.3445%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::memory (277 samples, 5.18%)</title><rect x="86.5108%" y="117" width="5.1824%" height="15" fill="rgb(216,99,12)" fg:x="4624" fg:w="277"/><text x="86.7608%" y="127.50">&lt;simul..</text></g><g><title>simulator::core::Core::load_word (204 samples, 3.82%)</title><rect x="87.8765%" y="101" width="3.8167%" height="15" fill="rgb(226,22,26)" fg:x="4697" fg:w="204"/><text x="88.1265%" y="111.50">simu..</text></g><g><title>simulator::cache::Cache::get_word (200 samples, 3.74%)</title><rect x="87.9514%" y="85" width="3.7418%" height="15" fill="rgb(217,163,10)" fg:x="4701" fg:w="200"/><text x="88.2014%" y="95.50">simu..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (62 samples, 1.16%)</title><rect x="90.5332%" y="69" width="1.1600%" height="15" fill="rgb(213,25,53)" fg:x="4839" fg:w="62"/><text x="90.7832%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (7 samples, 0.13%)</title><rect x="91.5622%" y="53" width="0.1310%" height="15" fill="rgb(252,105,26)" fg:x="4894" fg:w="7"/><text x="91.8122%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Sw as simulator::instruction::InstructionTrait&gt;::memory (1 samples, 0.02%)</title><rect x="91.6932%" y="117" width="0.0187%" height="15" fill="rgb(220,39,43)" fg:x="4901" fg:w="1"/><text x="91.9432%" y="127.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (26 samples, 0.49%)</title><rect x="92.8344%" y="85" width="0.4864%" height="15" fill="rgb(229,68,48)" fg:x="4962" fg:w="26"/><text x="93.0844%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.13%)</title><rect x="93.1899%" y="69" width="0.1310%" height="15" fill="rgb(252,8,32)" fg:x="4981" fg:w="7"/><text x="93.4399%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (13 samples, 0.24%)</title><rect x="93.6015%" y="69" width="0.2432%" height="15" fill="rgb(223,20,43)" fg:x="5003" fg:w="13"/><text x="93.8515%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (48 samples, 0.90%)</title><rect x="93.3209%" y="85" width="0.8980%" height="15" fill="rgb(229,81,49)" fg:x="4988" fg:w="48"/><text x="93.5709%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (20 samples, 0.37%)</title><rect x="93.8447%" y="69" width="0.3742%" height="15" fill="rgb(236,28,36)" fg:x="5016" fg:w="20"/><text x="94.0947%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="94.1628%" y="53" width="0.0561%" height="15" fill="rgb(249,185,26)" fg:x="5033" fg:w="3"/><text x="94.4128%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (28 samples, 0.52%)</title><rect x="94.6866%" y="69" width="0.5239%" height="15" fill="rgb(249,174,33)" fg:x="5061" fg:w="28"/><text x="94.9366%" y="79.50"></text></g><g><title>simulator::instruction::memory_access (966 samples, 18.07%)</title><rect x="77.3246%" y="133" width="18.0730%" height="15" fill="rgb(233,201,37)" fg:x="4133" fg:w="966"/><text x="77.5746%" y="143.50">simulator::instruction::memo..</text></g><g><title>simulator::core::Core::store_word (197 samples, 3.69%)</title><rect x="91.7119%" y="117" width="3.6857%" height="15" fill="rgb(221,78,26)" fg:x="4902" fg:w="197"/><text x="91.9619%" y="127.50">simu..</text></g><g><title>simulator::cache::Cache::set_word (193 samples, 3.61%)</title><rect x="91.7867%" y="101" width="3.6109%" height="15" fill="rgb(250,127,30)" fg:x="4906" fg:w="193"/><text x="92.0367%" y="111.50">simu..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove (63 samples, 1.18%)</title><rect x="94.2189%" y="85" width="1.1787%" height="15" fill="rgb(230,49,44)" fg:x="5036" fg:w="63"/><text x="94.4689%" y="95.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (10 samples, 0.19%)</title><rect x="95.2105%" y="69" width="0.1871%" height="15" fill="rgb(229,67,23)" fg:x="5089" fg:w="10"/><text x="95.4605%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="95.3789%" y="53" width="0.0187%" height="15" fill="rgb(249,83,47)" fg:x="5098" fg:w="1"/><text x="95.6289%" y="63.50"></text></g><g><title>&lt;simulator::instruction::Add as simulator::instruction::InstructionTrait&gt;::write_back (4 samples, 0.07%)</title><rect x="98.0543%" y="117" width="0.0748%" height="15" fill="rgb(215,43,3)" fg:x="5241" fg:w="4"/><text x="98.3043%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Addi as simulator::instruction::InstructionTrait&gt;::write_back (15 samples, 0.28%)</title><rect x="98.1291%" y="117" width="0.2806%" height="15" fill="rgb(238,154,13)" fg:x="5245" fg:w="15"/><text x="98.3791%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Flw as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="98.4097%" y="117" width="0.0374%" height="15" fill="rgb(219,56,2)" fg:x="5260" fg:w="2"/><text x="98.6597%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fmul as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="98.4471%" y="117" width="0.0187%" height="15" fill="rgb(233,0,4)" fg:x="5262" fg:w="1"/><text x="98.6971%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Fsub as simulator::instruction::InstructionTrait&gt;::write_back (1 samples, 0.02%)</title><rect x="98.4659%" y="117" width="0.0187%" height="15" fill="rgb(235,30,7)" fg:x="5263" fg:w="1"/><text x="98.7159%" y="127.50"></text></g><g><title>&lt;simulator::instruction::BInstructionData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="99.5136%" y="101" width="0.0561%" height="15" fill="rgb(250,79,13)" fg:x="5319" fg:w="3"/><text x="99.7636%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntIInstructionData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="99.5697%" y="101" width="0.0374%" height="15" fill="rgb(211,146,34)" fg:x="5322" fg:w="2"/><text x="99.8197%" y="111.50"></text></g><g><title>&lt;simulator::instruction::IntRInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.6071%" y="101" width="0.0187%" height="15" fill="rgb(228,22,38)" fg:x="5324" fg:w="1"/><text x="99.8571%" y="111.50"></text></g><g><title>&lt;simulator::instruction::JInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.6258%" y="101" width="0.0187%" height="15" fill="rgb(235,168,5)" fg:x="5325" fg:w="1"/><text x="99.8758%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Lb as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="99.6445%" y="101" width="0.0748%" height="15" fill="rgb(221,155,16)" fg:x="5326" fg:w="4"/><text x="99.8945%" y="111.50"></text></g><g><title>&lt;simulator::instruction::InstructionEnum as core::clone::Clone&gt;::clone (67 samples, 1.25%)</title><rect x="98.4846%" y="117" width="1.2535%" height="15" fill="rgb(215,215,53)" fg:x="5264" fg:w="67"/><text x="98.7346%" y="127.50"></text></g><g><title>&lt;simulator::instruction::UInstructionData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.7194%" y="101" width="0.0187%" height="15" fill="rgb(223,4,10)" fg:x="5330" fg:w="1"/><text x="99.9694%" y="111.50"></text></g><g><title>&lt;simulator::instruction::Jal as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="99.7381%" y="117" width="0.0374%" height="15" fill="rgb(234,103,6)" fg:x="5331" fg:w="2"/><text x="99.9881%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Jalr as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="99.7755%" y="117" width="0.0374%" height="15" fill="rgb(227,97,0)" fg:x="5333" fg:w="2"/><text x="100.0255%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lui as simulator::instruction::InstructionTrait&gt;::write_back (2 samples, 0.04%)</title><rect x="99.8129%" y="117" width="0.0374%" height="15" fill="rgb(234,150,53)" fg:x="5335" fg:w="2"/><text x="100.0629%" y="127.50"></text></g><g><title>&lt;simulator::instruction::Lw as simulator::instruction::InstructionTrait&gt;::write_back (5 samples, 0.09%)</title><rect x="99.8503%" y="117" width="0.0935%" height="15" fill="rgb(228,201,54)" fg:x="5337" fg:w="5"/><text x="100.1003%" y="127.50"></text></g><g><title>all (5,345 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="431.50"></text></g><g><title>simulator (5,345 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="415.50">simulator</text></g><g><title>_start (5,345 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="399.50">_start</text></g><g><title>__libc_start_main (5,345 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="383.50">__libc_start_main</text></g><g><title>main (5,345 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (5,345 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,345 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="335.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,345 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="319.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,345 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="303.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,345 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="287.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,345 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,345 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="255.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,345 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="239.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,345 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="223.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,345 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="207.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,345 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="191.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simulator::main (5,345 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="175.50">simulator::main</text></g><g><title>simulator::core::Core::run (5,345 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="5345"/><text x="0.2500%" y="159.50">simulator::core::Core::run</text></g><g><title>simulator::instruction::write_back (246 samples, 4.60%)</title><rect x="95.3976%" y="133" width="4.6024%" height="15" fill="rgb(254,173,49)" fg:x="5099" fg:w="246"/><text x="95.6476%" y="143.50">simul..</text></g><g><title>&lt;simulator::instruction::Slli as simulator::instruction::InstructionTrait&gt;::write_back (3 samples, 0.06%)</title><rect x="99.9439%" y="117" width="0.0561%" height="15" fill="rgb(221,1,38)" fg:x="5342" fg:w="3"/><text x="100.1939%" y="127.50"></text></g></svg></svg>